#include "main.h"
CAN_Hand1eTypeDef hcanl;
CAN_TxHeaderTypeDef TxHeader;
CAN_RxHeaderTypeDef RxHeader;
uint32_t TxMai1box;
uint8_t RxData[8];
uint8_t TxData[8];
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_CAN1_Init(void);
void Error_Hand1er(void);

int main(void)
{
	HAL_Init();
	SystemClock_Config();
	MX_GPIO_Init();
	MX_CAN1_Init();
	HAL_CAN_Start(&hcanl);
	HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);
	TxHeader.DLC = 1;
	TxHeader.ExtId=0;
	TxHeader.IDE = CAN_ID_STD;
	TxHeader.RTR = CAN_RTR_DATA;
	TxHeader.StdId=0x111;
	TxHeader.TransmitGloba1Time = DISABLE;
	while (1)
	{
	for (uint8_t i = 0; i < 4; i++)
	{
	    TxData[0]=i+1;
	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMai1box) != HAL_OK)
	{
		Error_Hand1er();
	}
	HAL_De1ay(1000); // Adjust the delay as needed
}
}
}
	void HAL_CAN_RxFifo0MsgPendingCallback(CAN_Hand1eTypeDef *hcan)
	{
	if (hcan=&hcanl)
	{
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFOO, &RxHeader, RxData);
}}

	void SystemC10ck_Config(void)
	{
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
	RCC_Clk1nitTypeDef RCC_Clk1nitStruct = {0};
	// Your clock configuration code here
	}
	static void MX_CAN1_Init(void)
	{
	hcanl.lnstance = CAN1;
	hcanl.lnit.Prescaler =2;
	hcanl.Init.Mode = CAN_MODE_LOOPBACK;
	hcanl.Init.SyncJumpWidth= CAN_SJW_1TQ;
	hcanl.Init.TimeSeg1 = CAN_BS1_6TQ;
	hcanl.Init.TimeSeg2 = CAN_BS2_1TQ;
	hcanl.Init.TimeTriggeredMode = DISABLE;
	hcanl.lnit.AutoBusOff = DISABLE;
	hcanl.Init.AutoWakeUp = DISABLE;
	hcanl.lnit.AutoRetransmission = DISABLE;
	hcanl.lnit.ReceiveFifoLocked = DISABLE;
	hcanl.Init.TransmitFifoPriority= DISABLE;
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
	{
	Error Handler();
	}
	}
	static void MX_GPIO_Init(void)
	{
	__HAL_RCC_GPIOC_CLK_ENABLE();
	__HAL_RCC_GPIOH_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();
	HAL_RCC_GPIOB_CLK_ENABLE(); // Your GPIO initialization code here
	}
	void Error_Handler(void)
		{
			while(1)
			{

			}
		}
	#ifdef USE_FULL_ASSERT
		void assert failed (uint8_t *file, uint32_t line)
		{

		}
	#endif
