
DAC_output_pinA4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001b8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08000340  08000340  00010340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000390  08000390  00010398  2**0
                  CONTENTS
  4 .ARM          00000000  08000390  08000390  00010398  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000390  08000398  00010398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000390  08000390  00010390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000394  08000394  00010394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010398  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010398  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000103c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000042a  00000000  00000000  0001040b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000132  00000000  00000000  00010835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000050  00000000  00000000  00010968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000033  00000000  00000000  000109b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000164b9  00000000  00000000  000109eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000057a  00000000  00000000  00026ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0007d9c4  00000000  00000000  0002741e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000084  00000000  00000000  000a4de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  000a4e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000328 	.word	0x08000328

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000328 	.word	0x08000328

080001c8 <delay>:
#include <stm32f405xx.h>

uint32_t analog;
void delay(uint32_t dly)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0;i<dly;i++);
 80001d0:	2300      	movs	r3, #0
 80001d2:	60fb      	str	r3, [r7, #12]
 80001d4:	e002      	b.n	80001dc <delay+0x14>
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	3301      	adds	r3, #1
 80001da:	60fb      	str	r3, [r7, #12]
 80001dc:	68fa      	ldr	r2, [r7, #12]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	429a      	cmp	r2, r3
 80001e2:	d3f8      	bcc.n	80001d6 <delay+0xe>
	for(j=0;i<16000;j++);
 80001e4:	2300      	movs	r3, #0
 80001e6:	60bb      	str	r3, [r7, #8]
 80001e8:	e002      	b.n	80001f0 <delay+0x28>
 80001ea:	68bb      	ldr	r3, [r7, #8]
 80001ec:	3301      	adds	r3, #1
 80001ee:	60bb      	str	r3, [r7, #8]
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80001f6:	d3f8      	bcc.n	80001ea <delay+0x22>
}
 80001f8:	bf00      	nop
 80001fa:	bf00      	nop
 80001fc:	3714      	adds	r7, #20
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
	...

08000208 <main>:

int main(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
    int i;
    const static int sinewave[]=
    {
    		0,500,1000,1500,2000,2500,3000,3500,4000,4095,0,4095,4000,3500,3000,2500,2000,1500,1000,500
    };
    RCC->AHB1ENR |= (1<<0);
 800020e:	4b1a      	ldr	r3, [pc, #104]	; (8000278 <main+0x70>)
 8000210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000212:	4a19      	ldr	r2, [pc, #100]	; (8000278 <main+0x70>)
 8000214:	f043 0301 	orr.w	r3, r3, #1
 8000218:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOA->MODER &= ~(3<<8);
 800021a:	4b18      	ldr	r3, [pc, #96]	; (800027c <main+0x74>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a17      	ldr	r2, [pc, #92]	; (800027c <main+0x74>)
 8000220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000224:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (3<<8);
 8000226:	4b15      	ldr	r3, [pc, #84]	; (800027c <main+0x74>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4a14      	ldr	r2, [pc, #80]	; (800027c <main+0x74>)
 800022c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000230:	6013      	str	r3, [r2, #0]

    RCC->APB1ENR |= (1<<29);
 8000232:	4b11      	ldr	r3, [pc, #68]	; (8000278 <main+0x70>)
 8000234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000236:	4a10      	ldr	r2, [pc, #64]	; (8000278 <main+0x70>)
 8000238:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800023c:	6413      	str	r3, [r2, #64]	; 0x40
    DAC->CR |= 1;
 800023e:	4b10      	ldr	r3, [pc, #64]	; (8000280 <main+0x78>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a0f      	ldr	r2, [pc, #60]	; (8000280 <main+0x78>)
 8000244:	f043 0301 	orr.w	r3, r3, #1
 8000248:	6013      	str	r3, [r2, #0]

    while(1){
    	for(i=0;i<20;i++){
 800024a:	2300      	movs	r3, #0
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	e00f      	b.n	8000270 <main+0x68>
    		DAC->DHR12R1 =sinewave[i];
 8000250:	4a0c      	ldr	r2, [pc, #48]	; (8000284 <main+0x7c>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000258:	4b09      	ldr	r3, [pc, #36]	; (8000280 <main+0x78>)
 800025a:	609a      	str	r2, [r3, #8]
    		analog=DAC->DHR12R1;
 800025c:	4b08      	ldr	r3, [pc, #32]	; (8000280 <main+0x78>)
 800025e:	689b      	ldr	r3, [r3, #8]
 8000260:	4a09      	ldr	r2, [pc, #36]	; (8000288 <main+0x80>)
 8000262:	6013      	str	r3, [r2, #0]
    		delay(200);
 8000264:	20c8      	movs	r0, #200	; 0xc8
 8000266:	f7ff ffaf 	bl	80001c8 <delay>
    	for(i=0;i<20;i++){
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	3301      	adds	r3, #1
 800026e:	607b      	str	r3, [r7, #4]
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2b13      	cmp	r3, #19
 8000274:	ddec      	ble.n	8000250 <main+0x48>
 8000276:	e7e8      	b.n	800024a <main+0x42>
 8000278:	40023800 	.word	0x40023800
 800027c:	40020000 	.word	0x40020000
 8000280:	40007400 	.word	0x40007400
 8000284:	08000340 	.word	0x08000340
 8000288:	2000001c 	.word	0x2000001c

0800028c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800028c:	480d      	ldr	r0, [pc, #52]	; (80002c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000290:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000294:	480c      	ldr	r0, [pc, #48]	; (80002c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000296:	490d      	ldr	r1, [pc, #52]	; (80002cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000298:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <LoopForever+0xe>)
  movs r3, #0
 800029a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800029c:	e002      	b.n	80002a4 <LoopCopyDataInit>

0800029e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a2:	3304      	adds	r3, #4

080002a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a8:	d3f9      	bcc.n	800029e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002aa:	4a0a      	ldr	r2, [pc, #40]	; (80002d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002ac:	4c0a      	ldr	r4, [pc, #40]	; (80002d8 <LoopForever+0x16>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b0:	e001      	b.n	80002b6 <LoopFillZerobss>

080002b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b4:	3204      	adds	r2, #4

080002b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b8:	d3fb      	bcc.n	80002b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ba:	f000 f811 	bl	80002e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002be:	f7ff ffa3 	bl	8000208 <main>

080002c2 <LoopForever>:

LoopForever:
  b LoopForever
 80002c2:	e7fe      	b.n	80002c2 <LoopForever>
  ldr   r0, =_estack
 80002c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002cc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d0:	08000398 	.word	0x08000398
  ldr r2, =_sbss
 80002d4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d8:	20000020 	.word	0x20000020

080002dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002dc:	e7fe      	b.n	80002dc <ADC_IRQHandler>
	...

080002e0 <__libc_init_array>:
 80002e0:	b570      	push	{r4, r5, r6, lr}
 80002e2:	4d0d      	ldr	r5, [pc, #52]	; (8000318 <__libc_init_array+0x38>)
 80002e4:	4c0d      	ldr	r4, [pc, #52]	; (800031c <__libc_init_array+0x3c>)
 80002e6:	1b64      	subs	r4, r4, r5
 80002e8:	10a4      	asrs	r4, r4, #2
 80002ea:	2600      	movs	r6, #0
 80002ec:	42a6      	cmp	r6, r4
 80002ee:	d109      	bne.n	8000304 <__libc_init_array+0x24>
 80002f0:	4d0b      	ldr	r5, [pc, #44]	; (8000320 <__libc_init_array+0x40>)
 80002f2:	4c0c      	ldr	r4, [pc, #48]	; (8000324 <__libc_init_array+0x44>)
 80002f4:	f000 f818 	bl	8000328 <_init>
 80002f8:	1b64      	subs	r4, r4, r5
 80002fa:	10a4      	asrs	r4, r4, #2
 80002fc:	2600      	movs	r6, #0
 80002fe:	42a6      	cmp	r6, r4
 8000300:	d105      	bne.n	800030e <__libc_init_array+0x2e>
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f855 3b04 	ldr.w	r3, [r5], #4
 8000308:	4798      	blx	r3
 800030a:	3601      	adds	r6, #1
 800030c:	e7ee      	b.n	80002ec <__libc_init_array+0xc>
 800030e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000312:	4798      	blx	r3
 8000314:	3601      	adds	r6, #1
 8000316:	e7f2      	b.n	80002fe <__libc_init_array+0x1e>
 8000318:	08000390 	.word	0x08000390
 800031c:	08000390 	.word	0x08000390
 8000320:	08000390 	.word	0x08000390
 8000324:	08000394 	.word	0x08000394

08000328 <_init>:
 8000328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032a:	bf00      	nop
 800032c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032e:	bc08      	pop	{r3}
 8000330:	469e      	mov	lr, r3
 8000332:	4770      	bx	lr

08000334 <_fini>:
 8000334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000336:	bf00      	nop
 8000338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033a:	bc08      	pop	{r3}
 800033c:	469e      	mov	lr, r3
 800033e:	4770      	bx	lr
