
init_USART_pin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000288  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000410  08000410  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000410  08000410  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000410  08000410  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000410  08000410  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000410  08000410  00010410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000414  08000414  00010414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000432  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000016f  00000000  00000000  000204a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000068  00000000  00000000  00020618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000045  00000000  00000000  00020680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000164bf  00000000  00000000  000206c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000609  00000000  00000000  00036b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0007d97c  00000000  00000000  0003718d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000000ec  00000000  00000000  000b4b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  000b4bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080003f8 	.word	0x080003f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080003f8 	.word	0x080003f8

080001c8 <main>:
void delayMs(int);

#define size 4
uint8_t a[size] = {11, 12, 13, 14};

int main(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
    USART3_init();
 80001ce:	f000 f821 	bl	8000214 <USART3_init>
    while (1) {
        for (int i = 0; i < 4; i++) {
 80001d2:	2300      	movs	r3, #0
 80001d4:	607b      	str	r3, [r7, #4]
 80001d6:	e015      	b.n	8000204 <main+0x3c>
            USART3_write(a[i]);
 80001d8:	4a0c      	ldr	r2, [pc, #48]	; (800020c <main+0x44>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4413      	add	r3, r2
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 f873 	bl	80002cc <USART3_write>
            delayMs(100);
 80001e6:	2064      	movs	r0, #100	; 0x64
 80001e8:	f000 f89c 	bl	8000324 <delayMs>
            read_Ch = USART3_read();
 80001ec:	f000 f886 	bl	80002fc <USART3_read>
 80001f0:	4603      	mov	r3, r0
 80001f2:	461a      	mov	r2, r3
 80001f4:	4b06      	ldr	r3, [pc, #24]	; (8000210 <main+0x48>)
 80001f6:	701a      	strb	r2, [r3, #0]
            delayMs(100);
 80001f8:	2064      	movs	r0, #100	; 0x64
 80001fa:	f000 f893 	bl	8000324 <delayMs>
        for (int i = 0; i < 4; i++) {
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	3301      	adds	r3, #1
 8000202:	607b      	str	r3, [r7, #4]
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2b03      	cmp	r3, #3
 8000208:	dde6      	ble.n	80001d8 <main+0x10>
 800020a:	e7e2      	b.n	80001d2 <main+0xa>
 800020c:	20000000 	.word	0x20000000
 8000210:	20000020 	.word	0x20000020

08000214 <USART3_init>:
        }
    }
}

void USART3_init(void) {
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 2);  // Enable GPIOC clock
 8000218:	4b29      	ldr	r3, [pc, #164]	; (80002c0 <USART3_init+0xac>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a28      	ldr	r2, [pc, #160]	; (80002c0 <USART3_init+0xac>)
 800021e:	f043 0304 	orr.w	r3, r3, #4
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= (1 << 18); // Enable USART3 clock
 8000224:	4b26      	ldr	r3, [pc, #152]	; (80002c0 <USART3_init+0xac>)
 8000226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000228:	4a25      	ldr	r2, [pc, #148]	; (80002c0 <USART3_init+0xac>)
 800022a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800022e:	6413      	str	r3, [r2, #64]	; 0x40

    // PC10 is the TX PIN for USART3
    GPIOC->MODER &= ~(3 << 20); // PC10, clear bit 21, 20
 8000230:	4b24      	ldr	r3, [pc, #144]	; (80002c4 <USART3_init+0xb0>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a23      	ldr	r2, [pc, #140]	; (80002c4 <USART3_init+0xb0>)
 8000236:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800023a:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (1 << 21);  // PC10 in AFR mode, set bit 21
 800023c:	4b21      	ldr	r3, [pc, #132]	; (80002c4 <USART3_init+0xb0>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a20      	ldr	r2, [pc, #128]	; (80002c4 <USART3_init+0xb0>)
 8000242:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000246:	6013      	str	r3, [r2, #0]
    GPIOC->AFR[1] &= ~(0xF << 8); // AFRH since pin10, clear bits 11, 10, 9, 8
 8000248:	4b1e      	ldr	r3, [pc, #120]	; (80002c4 <USART3_init+0xb0>)
 800024a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800024c:	4a1d      	ldr	r2, [pc, #116]	; (80002c4 <USART3_init+0xb0>)
 800024e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000252:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOC->AFR[1] |= (7 << 8);  // AF7(0111), set bits 10, 9, 8
 8000254:	4b1b      	ldr	r3, [pc, #108]	; (80002c4 <USART3_init+0xb0>)
 8000256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000258:	4a1a      	ldr	r2, [pc, #104]	; (80002c4 <USART3_init+0xb0>)
 800025a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800025e:	6253      	str	r3, [r2, #36]	; 0x24

    // PC11 is the RX PIN for USART3
    GPIOC->MODER &= ~(3 << 22); // PC11, clear bit 23, 22
 8000260:	4b18      	ldr	r3, [pc, #96]	; (80002c4 <USART3_init+0xb0>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a17      	ldr	r2, [pc, #92]	; (80002c4 <USART3_init+0xb0>)
 8000266:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800026a:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (1 << 23);  // PC11 in AFR mode, set bit 23, AF-19
 800026c:	4b15      	ldr	r3, [pc, #84]	; (80002c4 <USART3_init+0xb0>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a14      	ldr	r2, [pc, #80]	; (80002c4 <USART3_init+0xb0>)
 8000272:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000276:	6013      	str	r3, [r2, #0]
    GPIOC->AFR[1] &= ~(0xF << 12); // AFRH since pin11, clear bits 15, 14, 13, 12
 8000278:	4b12      	ldr	r3, [pc, #72]	; (80002c4 <USART3_init+0xb0>)
 800027a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800027c:	4a11      	ldr	r2, [pc, #68]	; (80002c4 <USART3_init+0xb0>)
 800027e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000282:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOC->AFR[1] |= (7 << 12);  // AF7(0111), set bits 14, 13, 12
 8000284:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <USART3_init+0xb0>)
 8000286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000288:	4a0e      	ldr	r2, [pc, #56]	; (80002c4 <USART3_init+0xb0>)
 800028a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800028e:	6253      	str	r3, [r2, #36]	; 0x24

    // USART3 Settings
    USART3->BRR = 0x0683; // 9600 baud @ 16 MHz
 8000290:	4b0d      	ldr	r3, [pc, #52]	; (80002c8 <USART3_init+0xb4>)
 8000292:	f240 6283 	movw	r2, #1667	; 0x683
 8000296:	609a      	str	r2, [r3, #8]
    USART3->CR1 = (0xC << 0); // Enable RE and TE bits - 1100, set bits 3, 2
 8000298:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <USART3_init+0xb4>)
 800029a:	220c      	movs	r2, #12
 800029c:	60da      	str	r2, [r3, #12]
    USART3->CR2 = 0; // 1 stop bit (00), bits 13, 12 corresponding to the number of stop bits
 800029e:	4b0a      	ldr	r3, [pc, #40]	; (80002c8 <USART3_init+0xb4>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	611a      	str	r2, [r3, #16]
    USART3->CR3 = 0; // Default settings
 80002a4:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <USART3_init+0xb4>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	615a      	str	r2, [r3, #20]
    USART3->CR1 |= (1 << 13); // USART3 Enable
 80002aa:	4b07      	ldr	r3, [pc, #28]	; (80002c8 <USART3_init+0xb4>)
 80002ac:	68db      	ldr	r3, [r3, #12]
 80002ae:	4a06      	ldr	r2, [pc, #24]	; (80002c8 <USART3_init+0xb4>)
 80002b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002b4:	60d3      	str	r3, [r2, #12]
}
 80002b6:	bf00      	nop
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr
 80002c0:	40023800 	.word	0x40023800
 80002c4:	40020800 	.word	0x40020800
 80002c8:	40004800 	.word	0x40004800

080002cc <USART3_write>:

void USART3_write(uint8_t ch) {
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	71fb      	strb	r3, [r7, #7]
    while (!(USART3->SR & (1 << 7))) {} // Wait until TXE (Transmit Data Register Empty) flag is set
 80002d6:	bf00      	nop
 80002d8:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <USART3_write+0x2c>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d0f9      	beq.n	80002d8 <USART3_write+0xc>
    USART3->DR = (ch & 0xFF);
 80002e4:	4a04      	ldr	r2, [pc, #16]	; (80002f8 <USART3_write+0x2c>)
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	6053      	str	r3, [r2, #4]
}
 80002ea:	bf00      	nop
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40004800 	.word	0x40004800

080002fc <USART3_read>:

uint8_t USART3_read(void) {
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
    while (!(USART3->SR & (1 << 5))) {} // Wait until RXNE (Read Data Register Not Empty) flag is set
 8000300:	bf00      	nop
 8000302:	4b07      	ldr	r3, [pc, #28]	; (8000320 <USART3_read+0x24>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f003 0320 	and.w	r3, r3, #32
 800030a:	2b00      	cmp	r3, #0
 800030c:	d0f9      	beq.n	8000302 <USART3_read+0x6>
    return USART3->DR;
 800030e:	4b04      	ldr	r3, [pc, #16]	; (8000320 <USART3_read+0x24>)
 8000310:	685b      	ldr	r3, [r3, #4]
 8000312:	b2db      	uxtb	r3, r3
}
 8000314:	4618      	mov	r0, r3
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40004800 	.word	0x40004800

08000324 <delayMs>:

void delayMs(int n) {
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
    int i;
    for (; n > 0; n--) {
 800032c:	e00c      	b.n	8000348 <delayMs+0x24>
        for (i = 0; i < 2000; i++);
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e002      	b.n	800033a <delayMs+0x16>
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	3301      	adds	r3, #1
 8000338:	60fb      	str	r3, [r7, #12]
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000340:	dbf8      	blt.n	8000334 <delayMs+0x10>
    for (; n > 0; n--) {
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	3b01      	subs	r3, #1
 8000346:	607b      	str	r3, [r7, #4]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2b00      	cmp	r3, #0
 800034c:	dcef      	bgt.n	800032e <delayMs+0xa>
    }
}
 800034e:	bf00      	nop
 8000350:	bf00      	nop
 8000352:	3714      	adds	r7, #20
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr

0800035c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800035c:	480d      	ldr	r0, [pc, #52]	; (8000394 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000360:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000364:	480c      	ldr	r0, [pc, #48]	; (8000398 <LoopForever+0x6>)
  ldr r1, =_edata
 8000366:	490d      	ldr	r1, [pc, #52]	; (800039c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <LoopForever+0xe>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800036c:	e002      	b.n	8000374 <LoopCopyDataInit>

0800036e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000372:	3304      	adds	r3, #4

08000374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000378:	d3f9      	bcc.n	800036e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800037c:	4c0a      	ldr	r4, [pc, #40]	; (80003a8 <LoopForever+0x16>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000380:	e001      	b.n	8000386 <LoopFillZerobss>

08000382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000384:	3204      	adds	r2, #4

08000386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000388:	d3fb      	bcc.n	8000382 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038a:	f000 f811 	bl	80003b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038e:	f7ff ff1b 	bl	80001c8 <main>

08000392 <LoopForever>:

LoopForever:
  b LoopForever
 8000392:	e7fe      	b.n	8000392 <LoopForever>
  ldr   r0, =_estack
 8000394:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800039c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003a0:	08000418 	.word	0x08000418
  ldr r2, =_sbss
 80003a4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003a8:	20000024 	.word	0x20000024

080003ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC_IRQHandler>
	...

080003b0 <__libc_init_array>:
 80003b0:	b570      	push	{r4, r5, r6, lr}
 80003b2:	4d0d      	ldr	r5, [pc, #52]	; (80003e8 <__libc_init_array+0x38>)
 80003b4:	4c0d      	ldr	r4, [pc, #52]	; (80003ec <__libc_init_array+0x3c>)
 80003b6:	1b64      	subs	r4, r4, r5
 80003b8:	10a4      	asrs	r4, r4, #2
 80003ba:	2600      	movs	r6, #0
 80003bc:	42a6      	cmp	r6, r4
 80003be:	d109      	bne.n	80003d4 <__libc_init_array+0x24>
 80003c0:	4d0b      	ldr	r5, [pc, #44]	; (80003f0 <__libc_init_array+0x40>)
 80003c2:	4c0c      	ldr	r4, [pc, #48]	; (80003f4 <__libc_init_array+0x44>)
 80003c4:	f000 f818 	bl	80003f8 <_init>
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	10a4      	asrs	r4, r4, #2
 80003cc:	2600      	movs	r6, #0
 80003ce:	42a6      	cmp	r6, r4
 80003d0:	d105      	bne.n	80003de <__libc_init_array+0x2e>
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d8:	4798      	blx	r3
 80003da:	3601      	adds	r6, #1
 80003dc:	e7ee      	b.n	80003bc <__libc_init_array+0xc>
 80003de:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e2:	4798      	blx	r3
 80003e4:	3601      	adds	r6, #1
 80003e6:	e7f2      	b.n	80003ce <__libc_init_array+0x1e>
 80003e8:	08000410 	.word	0x08000410
 80003ec:	08000410 	.word	0x08000410
 80003f0:	08000410 	.word	0x08000410
 80003f4:	08000414 	.word	0x08000414

080003f8 <_init>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr

08000404 <_fini>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr
