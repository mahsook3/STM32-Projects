
Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000350  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004d8  080004e0  000104e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004d8  080004d8  000104e0  2**0
                  CONTENTS
  4 .ARM          00000000  080004d8  080004d8  000104e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004d8  080004e0  000104e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004d8  080004d8  000104d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004dc  080004dc  000104dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000104e0  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000104e0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010510  2**0
                  CONTENTS, READONLY
 14 .debug_info   000005d0  00000000  00000000  00010553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000180  00000000  00000000  00010b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000058  00000000  00000000  00010ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000003a  00000000  00000000  00010d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00017044  00000000  00000000  00010d3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000076d  00000000  00000000  00027d7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000813fb  00000000  00000000  000284eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000000a4  00000000  00000000  000a98e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  000a998c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080004c0 	.word	0x080004c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080004c0 	.word	0x080004c0

080001c8 <pc6_tim3_pwm_config>:
#include <stdint.h>

#include "stm32f405xx.h"

uint32_t result;
void pc6_tim3_pwm_config(void) {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  RCC -> AHB1ENR |= (1 << 2);
 80001cc:	4b1b      	ldr	r3, [pc, #108]	; (800023c <pc6_tim3_pwm_config+0x74>)
 80001ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001d0:	4a1a      	ldr	r2, [pc, #104]	; (800023c <pc6_tim3_pwm_config+0x74>)
 80001d2:	f043 0304 	orr.w	r3, r3, #4
 80001d6:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOC -> MODER |= (2 << 12);
 80001d8:	4b19      	ldr	r3, [pc, #100]	; (8000240 <pc6_tim3_pwm_config+0x78>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a18      	ldr	r2, [pc, #96]	; (8000240 <pc6_tim3_pwm_config+0x78>)
 80001de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001e2:	6013      	str	r3, [r2, #0]
  GPIOC -> AFR[0] = (2 << 24);
 80001e4:	4b16      	ldr	r3, [pc, #88]	; (8000240 <pc6_tim3_pwm_config+0x78>)
 80001e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80001ea:	621a      	str	r2, [r3, #32]
  RCC -> APB1ENR |= (1 << 1);
 80001ec:	4b13      	ldr	r3, [pc, #76]	; (800023c <pc6_tim3_pwm_config+0x74>)
 80001ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80001f0:	4a12      	ldr	r2, [pc, #72]	; (800023c <pc6_tim3_pwm_config+0x74>)
 80001f2:	f043 0302 	orr.w	r3, r3, #2
 80001f6:	6413      	str	r3, [r2, #64]	; 0x40
  TIM3 -> PSC = 0;
 80001f8:	4b12      	ldr	r3, [pc, #72]	; (8000244 <pc6_tim3_pwm_config+0x7c>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	629a      	str	r2, [r3, #40]	; 0x28
  TIM3 -> CNT = 0;
 80001fe:	4b11      	ldr	r3, [pc, #68]	; (8000244 <pc6_tim3_pwm_config+0x7c>)
 8000200:	2200      	movs	r2, #0
 8000202:	625a      	str	r2, [r3, #36]	; 0x24
  TIM3 -> CR1 |= (1 << 0);
 8000204:	4b0f      	ldr	r3, [pc, #60]	; (8000244 <pc6_tim3_pwm_config+0x7c>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a0e      	ldr	r2, [pc, #56]	; (8000244 <pc6_tim3_pwm_config+0x7c>)
 800020a:	f043 0301 	orr.w	r3, r3, #1
 800020e:	6013      	str	r3, [r2, #0]
  TIM3 -> CCMR1 |= (0 << 3);
 8000210:	4b0c      	ldr	r3, [pc, #48]	; (8000244 <pc6_tim3_pwm_config+0x7c>)
 8000212:	4a0c      	ldr	r2, [pc, #48]	; (8000244 <pc6_tim3_pwm_config+0x7c>)
 8000214:	699b      	ldr	r3, [r3, #24]
 8000216:	6193      	str	r3, [r2, #24]
  TIM3 -> CCMR1 |= (7 << 4);
 8000218:	4b0a      	ldr	r3, [pc, #40]	; (8000244 <pc6_tim3_pwm_config+0x7c>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	4a09      	ldr	r2, [pc, #36]	; (8000244 <pc6_tim3_pwm_config+0x7c>)
 800021e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000222:	6193      	str	r3, [r2, #24]
  TIM3 -> CCER |= (3 << 0);
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <pc6_tim3_pwm_config+0x7c>)
 8000226:	6a1b      	ldr	r3, [r3, #32]
 8000228:	4a06      	ldr	r2, [pc, #24]	; (8000244 <pc6_tim3_pwm_config+0x7c>)
 800022a:	f043 0303 	orr.w	r3, r3, #3
 800022e:	6213      	str	r3, [r2, #32]
}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	40023800 	.word	0x40023800
 8000240:	40020800 	.word	0x40020800
 8000244:	40000400 	.word	0x40000400

08000248 <tim3_pc6_set_dutycycle>:
void tim3_pc6_set_dutycycle(uint32_t freq, uint32_t duty_cycle, uint8_t channel) {
 8000248:	b480      	push	{r7}
 800024a:	b085      	sub	sp, #20
 800024c:	af00      	add	r7, sp, #0
 800024e:	60f8      	str	r0, [r7, #12]
 8000250:	60b9      	str	r1, [r7, #8]
 8000252:	4613      	mov	r3, r2
 8000254:	71fb      	strb	r3, [r7, #7]
  TIM3 -> ARR = ((16000000 / freq) - 1);
 8000256:	4a0c      	ldr	r2, [pc, #48]	; (8000288 <tim3_pc6_set_dutycycle+0x40>)
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	fbb2 f3f3 	udiv	r3, r2, r3
 800025e:	4a0b      	ldr	r2, [pc, #44]	; (800028c <tim3_pc6_set_dutycycle+0x44>)
 8000260:	3b01      	subs	r3, #1
 8000262:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIM3 -> CCR1 = (duty_cycle * ((TIM3 -> ARR) + 1)) / 100;
 8000264:	4b09      	ldr	r3, [pc, #36]	; (800028c <tim3_pc6_set_dutycycle+0x44>)
 8000266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000268:	3301      	adds	r3, #1
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	fb02 f303 	mul.w	r3, r2, r3
 8000270:	4a06      	ldr	r2, [pc, #24]	; (800028c <tim3_pc6_set_dutycycle+0x44>)
 8000272:	4907      	ldr	r1, [pc, #28]	; (8000290 <tim3_pc6_set_dutycycle+0x48>)
 8000274:	fba1 1303 	umull	r1, r3, r1, r3
 8000278:	095b      	lsrs	r3, r3, #5
 800027a:	6353      	str	r3, [r2, #52]	; 0x34
}
 800027c:	bf00      	nop
 800027e:	3714      	adds	r7, #20
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	00f42400 	.word	0x00f42400
 800028c:	40000400 	.word	0x40000400
 8000290:	51eb851f 	.word	0x51eb851f

08000294 <main>:
int main() {
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
  RCC -> AHB1ENR |= (1 << 0);
 800029a:	4b5d      	ldr	r3, [pc, #372]	; (8000410 <main+0x17c>)
 800029c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029e:	4a5c      	ldr	r2, [pc, #368]	; (8000410 <main+0x17c>)
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOA -> MODER &= ~(3 << 0); //clear pin mode PC2 POT
 80002a6:	4b5b      	ldr	r3, [pc, #364]	; (8000414 <main+0x180>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a5a      	ldr	r2, [pc, #360]	; (8000414 <main+0x180>)
 80002ac:	f023 0303 	bic.w	r3, r3, #3
 80002b0:	6013      	str	r3, [r2, #0]
  GPIOA -> MODER |= (3 << 0); //set pin analog mode (11)
 80002b2:	4b58      	ldr	r3, [pc, #352]	; (8000414 <main+0x180>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a57      	ldr	r2, [pc, #348]	; (8000414 <main+0x180>)
 80002b8:	f043 0303 	orr.w	r3, r3, #3
 80002bc:	6013      	str	r3, [r2, #0]

  /* setup ADC2*/
  RCC -> APB2ENR |= (1 << 8); //Enable ADC1 clock - ADC1 connected to APB2 BUS
 80002be:	4b54      	ldr	r3, [pc, #336]	; (8000410 <main+0x17c>)
 80002c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002c2:	4a53      	ldr	r2, [pc, #332]	; (8000410 <main+0x17c>)
 80002c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002c8:	6453      	str	r3, [r2, #68]	; 0x44
  ADC1 -> CR2 = 0; //0:Disable ADC conversion and go to power down mode
 80002ca:	4b53      	ldr	r3, [pc, #332]	; (8000418 <main+0x184>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	609a      	str	r2, [r3, #8]

  //ADC regular sequence register 3
  //SQR3 - Its 4:0 SQ1[4:0]:1st conversion in regular sequence

  ADC1 -> SQR3 |= (0 << 0); // conversion sequence starts at ch1
 80002d0:	4b51      	ldr	r3, [pc, #324]	; (8000418 <main+0x184>)
 80002d2:	4a51      	ldr	r2, [pc, #324]	; (8000418 <main+0x184>)
 80002d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002d6:	6353      	str	r3, [r2, #52]	; 0x34
  //SQR1 is 0000: 1 conversion

  ADC1 -> SQR1 = 0; //conversion sequence length is 1
 80002d8:	4b4f      	ldr	r3, [pc, #316]	; (8000418 <main+0x184>)
 80002da:	2200      	movs	r2, #0
 80002dc:	62da      	str	r2, [r3, #44]	; 0x2c
  ADC1 -> CR2 |= 1; //enable ADC1
 80002de:	4b4e      	ldr	r3, [pc, #312]	; (8000418 <main+0x184>)
 80002e0:	689b      	ldr	r3, [r3, #8]
 80002e2:	4a4d      	ldr	r2, [pc, #308]	; (8000418 <main+0x184>)
 80002e4:	f043 0301 	orr.w	r3, r3, #1
 80002e8:	6093      	str	r3, [r2, #8]
  pc6_tim3_pwm_config();
 80002ea:	f7ff ff6d 	bl	80001c8 <pc6_tim3_pwm_config>

  while (1) {
    ADC1 -> CR2 |= (1 << 30); // Start of conversion at regular channel
 80002ee:	4b4a      	ldr	r3, [pc, #296]	; (8000418 <main+0x184>)
 80002f0:	689b      	ldr	r3, [r3, #8]
 80002f2:	4a49      	ldr	r2, [pc, #292]	; (8000418 <main+0x184>)
 80002f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80002f8:	6093      	str	r3, [r2, #8]
    while (!(ADC1 -> SR & 2)) {} //wait for conversion to complete
 80002fa:	bf00      	nop
 80002fc:	4b46      	ldr	r3, [pc, #280]	; (8000418 <main+0x184>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f003 0302 	and.w	r3, r3, #2
 8000304:	2b00      	cmp	r3, #0
 8000306:	d0f9      	beq.n	80002fc <main+0x68>
    result = ADC1 -> DR;
 8000308:	4b43      	ldr	r3, [pc, #268]	; (8000418 <main+0x184>)
 800030a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030c:	4a43      	ldr	r2, [pc, #268]	; (800041c <main+0x188>)
 800030e:	6013      	str	r3, [r2, #0]


    if ((result > 1024) & (result <= 2048)) {
 8000310:	4b42      	ldr	r3, [pc, #264]	; (800041c <main+0x188>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000318:	bf8c      	ite	hi
 800031a:	2301      	movhi	r3, #1
 800031c:	2300      	movls	r3, #0
 800031e:	b2da      	uxtb	r2, r3
 8000320:	4b3e      	ldr	r3, [pc, #248]	; (800041c <main+0x188>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000328:	bf94      	ite	ls
 800032a:	2301      	movls	r3, #1
 800032c:	2300      	movhi	r3, #0
 800032e:	b2db      	uxtb	r3, r3
 8000330:	4013      	ands	r3, r2
 8000332:	b2db      	uxtb	r3, r3
 8000334:	2b00      	cmp	r3, #0
 8000336:	d010      	beq.n	800035a <main+0xc6>
      tim3_pc6_set_dutycycle(1000, 25, 1);
 8000338:	2201      	movs	r2, #1
 800033a:	2119      	movs	r1, #25
 800033c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000340:	f7ff ff82 	bl	8000248 <tim3_pc6_set_dutycycle>
      for (int i = 0; i < 3000000; i++);
 8000344:	2300      	movs	r3, #0
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	e002      	b.n	8000350 <main+0xbc>
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	3301      	adds	r3, #1
 800034e:	60fb      	str	r3, [r7, #12]
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	4a33      	ldr	r2, [pc, #204]	; (8000420 <main+0x18c>)
 8000354:	4293      	cmp	r3, r2
 8000356:	ddf8      	ble.n	800034a <main+0xb6>
 8000358:	e7c9      	b.n	80002ee <main+0x5a>
    }
    else if ((result > 2048) & (result <= 3072)) {
 800035a:	4b30      	ldr	r3, [pc, #192]	; (800041c <main+0x188>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000362:	bf8c      	ite	hi
 8000364:	2301      	movhi	r3, #1
 8000366:	2300      	movls	r3, #0
 8000368:	b2da      	uxtb	r2, r3
 800036a:	4b2c      	ldr	r3, [pc, #176]	; (800041c <main+0x188>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8000372:	bf94      	ite	ls
 8000374:	2301      	movls	r3, #1
 8000376:	2300      	movhi	r3, #0
 8000378:	b2db      	uxtb	r3, r3
 800037a:	4013      	ands	r3, r2
 800037c:	b2db      	uxtb	r3, r3
 800037e:	2b00      	cmp	r3, #0
 8000380:	d010      	beq.n	80003a4 <main+0x110>
      tim3_pc6_set_dutycycle(1000, 50, 1);
 8000382:	2201      	movs	r2, #1
 8000384:	2132      	movs	r1, #50	; 0x32
 8000386:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800038a:	f7ff ff5d 	bl	8000248 <tim3_pc6_set_dutycycle>
      for (int i = 0; i < 3000000; i++);
 800038e:	2300      	movs	r3, #0
 8000390:	60bb      	str	r3, [r7, #8]
 8000392:	e002      	b.n	800039a <main+0x106>
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	3301      	adds	r3, #1
 8000398:	60bb      	str	r3, [r7, #8]
 800039a:	68bb      	ldr	r3, [r7, #8]
 800039c:	4a20      	ldr	r2, [pc, #128]	; (8000420 <main+0x18c>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	ddf8      	ble.n	8000394 <main+0x100>
 80003a2:	e7a4      	b.n	80002ee <main+0x5a>
    }
    else if ((result > 3072) & (result <= 4096)) {
 80003a4:	4b1d      	ldr	r3, [pc, #116]	; (800041c <main+0x188>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80003ac:	bf8c      	ite	hi
 80003ae:	2301      	movhi	r3, #1
 80003b0:	2300      	movls	r3, #0
 80003b2:	b2da      	uxtb	r2, r3
 80003b4:	4b19      	ldr	r3, [pc, #100]	; (800041c <main+0x188>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003bc:	bf94      	ite	ls
 80003be:	2301      	movls	r3, #1
 80003c0:	2300      	movhi	r3, #0
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	4013      	ands	r3, r2
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d010      	beq.n	80003ee <main+0x15a>
      tim3_pc6_set_dutycycle(1000, 100, 1);
 80003cc:	2201      	movs	r2, #1
 80003ce:	2164      	movs	r1, #100	; 0x64
 80003d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003d4:	f7ff ff38 	bl	8000248 <tim3_pc6_set_dutycycle>
      for (int i = 0; i < 3000000; i++);
 80003d8:	2300      	movs	r3, #0
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	e002      	b.n	80003e4 <main+0x150>
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	3301      	adds	r3, #1
 80003e2:	607b      	str	r3, [r7, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a0e      	ldr	r2, [pc, #56]	; (8000420 <main+0x18c>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	ddf8      	ble.n	80003de <main+0x14a>
 80003ec:	e77f      	b.n	80002ee <main+0x5a>
    }
    else {
      tim3_pc6_set_dutycycle(1000, 0, 1);
 80003ee:	2201      	movs	r2, #1
 80003f0:	2100      	movs	r1, #0
 80003f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003f6:	f7ff ff27 	bl	8000248 <tim3_pc6_set_dutycycle>
      for (int i = 0; i < 3000000; i++);
 80003fa:	2300      	movs	r3, #0
 80003fc:	603b      	str	r3, [r7, #0]
 80003fe:	e002      	b.n	8000406 <main+0x172>
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	3301      	adds	r3, #1
 8000404:	603b      	str	r3, [r7, #0]
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	4a05      	ldr	r2, [pc, #20]	; (8000420 <main+0x18c>)
 800040a:	4293      	cmp	r3, r2
 800040c:	ddf8      	ble.n	8000400 <main+0x16c>
    ADC1 -> CR2 |= (1 << 30); // Start of conversion at regular channel
 800040e:	e76e      	b.n	80002ee <main+0x5a>
 8000410:	40023800 	.word	0x40023800
 8000414:	40020000 	.word	0x40020000
 8000418:	40012000 	.word	0x40012000
 800041c:	2000001c 	.word	0x2000001c
 8000420:	002dc6bf 	.word	0x002dc6bf

08000424 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000424:	480d      	ldr	r0, [pc, #52]	; (800045c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000426:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000428:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800042c:	480c      	ldr	r0, [pc, #48]	; (8000460 <LoopForever+0x6>)
  ldr r1, =_edata
 800042e:	490d      	ldr	r1, [pc, #52]	; (8000464 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000430:	4a0d      	ldr	r2, [pc, #52]	; (8000468 <LoopForever+0xe>)
  movs r3, #0
 8000432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000434:	e002      	b.n	800043c <LoopCopyDataInit>

08000436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800043a:	3304      	adds	r3, #4

0800043c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800043c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800043e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000440:	d3f9      	bcc.n	8000436 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000442:	4a0a      	ldr	r2, [pc, #40]	; (800046c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000444:	4c0a      	ldr	r4, [pc, #40]	; (8000470 <LoopForever+0x16>)
  movs r3, #0
 8000446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000448:	e001      	b.n	800044e <LoopFillZerobss>

0800044a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800044a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800044c:	3204      	adds	r2, #4

0800044e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800044e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000450:	d3fb      	bcc.n	800044a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000452:	f000 f811 	bl	8000478 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000456:	f7ff ff1d 	bl	8000294 <main>

0800045a <LoopForever>:

LoopForever:
  b LoopForever
 800045a:	e7fe      	b.n	800045a <LoopForever>
  ldr   r0, =_estack
 800045c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000464:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000468:	080004e0 	.word	0x080004e0
  ldr r2, =_sbss
 800046c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000470:	20000020 	.word	0x20000020

08000474 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000474:	e7fe      	b.n	8000474 <ADC_IRQHandler>
	...

08000478 <__libc_init_array>:
 8000478:	b570      	push	{r4, r5, r6, lr}
 800047a:	4d0d      	ldr	r5, [pc, #52]	; (80004b0 <__libc_init_array+0x38>)
 800047c:	4c0d      	ldr	r4, [pc, #52]	; (80004b4 <__libc_init_array+0x3c>)
 800047e:	1b64      	subs	r4, r4, r5
 8000480:	10a4      	asrs	r4, r4, #2
 8000482:	2600      	movs	r6, #0
 8000484:	42a6      	cmp	r6, r4
 8000486:	d109      	bne.n	800049c <__libc_init_array+0x24>
 8000488:	4d0b      	ldr	r5, [pc, #44]	; (80004b8 <__libc_init_array+0x40>)
 800048a:	4c0c      	ldr	r4, [pc, #48]	; (80004bc <__libc_init_array+0x44>)
 800048c:	f000 f818 	bl	80004c0 <_init>
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	10a4      	asrs	r4, r4, #2
 8000494:	2600      	movs	r6, #0
 8000496:	42a6      	cmp	r6, r4
 8000498:	d105      	bne.n	80004a6 <__libc_init_array+0x2e>
 800049a:	bd70      	pop	{r4, r5, r6, pc}
 800049c:	f855 3b04 	ldr.w	r3, [r5], #4
 80004a0:	4798      	blx	r3
 80004a2:	3601      	adds	r6, #1
 80004a4:	e7ee      	b.n	8000484 <__libc_init_array+0xc>
 80004a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004aa:	4798      	blx	r3
 80004ac:	3601      	adds	r6, #1
 80004ae:	e7f2      	b.n	8000496 <__libc_init_array+0x1e>
 80004b0:	080004d8 	.word	0x080004d8
 80004b4:	080004d8 	.word	0x080004d8
 80004b8:	080004d8 	.word	0x080004d8
 80004bc:	080004dc 	.word	0x080004dc

080004c0 <_init>:
 80004c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c2:	bf00      	nop
 80004c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c6:	bc08      	pop	{r3}
 80004c8:	469e      	mov	lr, r3
 80004ca:	4770      	bx	lr

080004cc <_fini>:
 80004cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ce:	bf00      	nop
 80004d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004d2:	bc08      	pop	{r3}
 80004d4:	469e      	mov	lr, r3
 80004d6:	4770      	bx	lr
