
adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000220  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003a8  080003b0  000103b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003a8  080003a8  000103b0  2**0
                  CONTENTS
  4 .ARM          00000000  080003a8  080003a8  000103b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003a8  080003b0  000103b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003a8  080003a8  000103a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003ac  080003ac  000103ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103b0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000103b0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000103e0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000149  00000000  00000000  00010423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000000b8  00000000  00000000  0001056c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000050  00000000  00000000  00010628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000033  00000000  00000000  00010678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00000f5e  00000000  00000000  000106ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000505  00000000  00000000  00011609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00003bd8  00000000  00000000  00011b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000084  00000000  00000000  000156e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000047  00000000  00000000  0001576c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000390 	.word	0x08000390

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000390 	.word	0x08000390

080001c8 <delay>:

//#if !defined(__SOFT_FP__) && defined(__ARM_FP)
//  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
//#endif

void delay(uint32_t till) {
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	till = till * 1500;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80001d6:	fb02 f303 	mul.w	r3, r2, r3
 80001da:	607b      	str	r3, [r7, #4]
	for(; till > 0; till--) ;
 80001dc:	e002      	b.n	80001e4 <delay+0x1c>
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	3b01      	subs	r3, #1
 80001e2:	607b      	str	r3, [r7, #4]
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d1f9      	bne.n	80001de <delay+0x16>
	//	for (uint32_t t = 0; t < 200000; t++);
}
 80001ea:	bf00      	nop
 80001ec:	bf00      	nop
 80001ee:	370c      	adds	r7, #12
 80001f0:	46bd      	mov	sp, r7
 80001f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f6:	4770      	bx	lr

080001f8 <main>:

int main(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
	// STM32F407VGT6
	// LED Blink code - GPIO PORT D - 12, 13, 14, 15 - Inbuilt LED Blink
	uint32_t *clockReg = (uint32_t*) 0x40023830; // RCC -> AHB1ENR
 80001fe:	4b3a      	ldr	r3, [pc, #232]	; (80002e8 <main+0xf0>)
 8000200:	60bb      	str	r3, [r7, #8]
	uint32_t *modeReg = (uint32_t*) 0x40020C00; // GPIOC -> MODER
 8000202:	4b3a      	ldr	r3, [pc, #232]	; (80002ec <main+0xf4>)
 8000204:	607b      	str	r3, [r7, #4]
	uint32_t *odrReg = (uint32_t*) 0x40020C14; // GPIOC -> ODR
 8000206:	4b3a      	ldr	r3, [pc, #232]	; (80002f0 <main+0xf8>)
 8000208:	603b      	str	r3, [r7, #0]

	*clockReg |= (1<<3);
 800020a:	68bb      	ldr	r3, [r7, #8]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f043 0208 	orr.w	r2, r3, #8
 8000212:	68bb      	ldr	r3, [r7, #8]
 8000214:	601a      	str	r2, [r3, #0]

	// GPIO 12
	*modeReg |= (1<<24);
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	601a      	str	r2, [r3, #0]
	*modeReg &= ~(1<<25);
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]
	// GPIO 12 - HIGH
	*odrReg |= (1<<12);
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	601a      	str	r2, [r3, #0]
	// GPIO 12 - LOW
	// *odrReg &= ~(1<<12);

	// GPIO 13
	*modeReg |= (1<<26);
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	601a      	str	r2, [r3, #0]
	*modeReg &= ~(1<<27);
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	601a      	str	r2, [r3, #0]
	*odrReg |= (1<<13);
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	601a      	str	r2, [r3, #0]
	// *odrReg &= ~(1<<13);

	// GPIO 14
	*modeReg |= (1<<28);
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	601a      	str	r2, [r3, #0]
	*modeReg &= ~(1<<29);
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	601a      	str	r2, [r3, #0]
	*odrReg |= (1<<14);
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	601a      	str	r2, [r3, #0]
	// *odrReg &= ~(1<<14);

	// GPIO 15
	*modeReg |= (1<<30);
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	601a      	str	r2, [r3, #0]
	*modeReg &= ~(1<<31);
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	601a      	str	r2, [r3, #0]
	*odrReg |= (1<<15);
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	601a      	str	r2, [r3, #0]
	// *odrReg &= ~(1<<15);

	while (1) {
		// AnticlockWise
		for (uint16_t ledPin = 15; ledPin >= 12; ledPin--) {
 80002a6:	230f      	movs	r3, #15
 80002a8:	81fb      	strh	r3, [r7, #14]
 80002aa:	e018      	b.n	80002de <main+0xe6>
			*odrReg ^= (1<<ledPin);
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	89fa      	ldrh	r2, [r7, #14]
 80002b2:	2101      	movs	r1, #1
 80002b4:	fa01 f202 	lsl.w	r2, r1, r2
 80002b8:	405a      	eors	r2, r3
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	601a      	str	r2, [r3, #0]
			delay(1000);
 80002be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c2:	f7ff ff81 	bl	80001c8 <delay>
			*odrReg ^= (1<<ledPin);
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	89fa      	ldrh	r2, [r7, #14]
 80002cc:	2101      	movs	r1, #1
 80002ce:	fa01 f202 	lsl.w	r2, r1, r2
 80002d2:	405a      	eors	r2, r3
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	601a      	str	r2, [r3, #0]
		for (uint16_t ledPin = 15; ledPin >= 12; ledPin--) {
 80002d8:	89fb      	ldrh	r3, [r7, #14]
 80002da:	3b01      	subs	r3, #1
 80002dc:	81fb      	strh	r3, [r7, #14]
 80002de:	89fb      	ldrh	r3, [r7, #14]
 80002e0:	2b0b      	cmp	r3, #11
 80002e2:	d8e3      	bhi.n	80002ac <main+0xb4>
 80002e4:	e7df      	b.n	80002a6 <main+0xae>
 80002e6:	bf00      	nop
 80002e8:	40023830 	.word	0x40023830
 80002ec:	40020c00 	.word	0x40020c00
 80002f0:	40020c14 	.word	0x40020c14

080002f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f4:	480d      	ldr	r0, [pc, #52]	; (800032c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002fc:	480c      	ldr	r0, [pc, #48]	; (8000330 <LoopForever+0x6>)
  ldr r1, =_edata
 80002fe:	490d      	ldr	r1, [pc, #52]	; (8000334 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000300:	4a0d      	ldr	r2, [pc, #52]	; (8000338 <LoopForever+0xe>)
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000304:	e002      	b.n	800030c <LoopCopyDataInit>

08000306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030a:	3304      	adds	r3, #4

0800030c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800030c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000310:	d3f9      	bcc.n	8000306 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000312:	4a0a      	ldr	r2, [pc, #40]	; (800033c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000314:	4c0a      	ldr	r4, [pc, #40]	; (8000340 <LoopForever+0x16>)
  movs r3, #0
 8000316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000318:	e001      	b.n	800031e <LoopFillZerobss>

0800031a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800031c:	3204      	adds	r2, #4

0800031e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000320:	d3fb      	bcc.n	800031a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000322:	f000 f811 	bl	8000348 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000326:	f7ff ff67 	bl	80001f8 <main>

0800032a <LoopForever>:

LoopForever:
  b LoopForever
 800032a:	e7fe      	b.n	800032a <LoopForever>
  ldr   r0, =_estack
 800032c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000334:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000338:	080003b0 	.word	0x080003b0
  ldr r2, =_sbss
 800033c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000340:	2000001c 	.word	0x2000001c

08000344 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000344:	e7fe      	b.n	8000344 <ADC_IRQHandler>
	...

08000348 <__libc_init_array>:
 8000348:	b570      	push	{r4, r5, r6, lr}
 800034a:	4d0d      	ldr	r5, [pc, #52]	; (8000380 <__libc_init_array+0x38>)
 800034c:	4c0d      	ldr	r4, [pc, #52]	; (8000384 <__libc_init_array+0x3c>)
 800034e:	1b64      	subs	r4, r4, r5
 8000350:	10a4      	asrs	r4, r4, #2
 8000352:	2600      	movs	r6, #0
 8000354:	42a6      	cmp	r6, r4
 8000356:	d109      	bne.n	800036c <__libc_init_array+0x24>
 8000358:	4d0b      	ldr	r5, [pc, #44]	; (8000388 <__libc_init_array+0x40>)
 800035a:	4c0c      	ldr	r4, [pc, #48]	; (800038c <__libc_init_array+0x44>)
 800035c:	f000 f818 	bl	8000390 <_init>
 8000360:	1b64      	subs	r4, r4, r5
 8000362:	10a4      	asrs	r4, r4, #2
 8000364:	2600      	movs	r6, #0
 8000366:	42a6      	cmp	r6, r4
 8000368:	d105      	bne.n	8000376 <__libc_init_array+0x2e>
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000370:	4798      	blx	r3
 8000372:	3601      	adds	r6, #1
 8000374:	e7ee      	b.n	8000354 <__libc_init_array+0xc>
 8000376:	f855 3b04 	ldr.w	r3, [r5], #4
 800037a:	4798      	blx	r3
 800037c:	3601      	adds	r6, #1
 800037e:	e7f2      	b.n	8000366 <__libc_init_array+0x1e>
 8000380:	080003a8 	.word	0x080003a8
 8000384:	080003a8 	.word	0x080003a8
 8000388:	080003a8 	.word	0x080003a8
 800038c:	080003ac 	.word	0x080003ac

08000390 <_init>:
 8000390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000392:	bf00      	nop
 8000394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000396:	bc08      	pop	{r3}
 8000398:	469e      	mov	lr, r3
 800039a:	4770      	bx	lr

0800039c <_fini>:
 800039c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039e:	bf00      	nop
 80003a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a2:	bc08      	pop	{r3}
 80003a4:	469e      	mov	lr, r3
 80003a6:	4770      	bx	lr
