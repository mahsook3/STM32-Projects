
CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001628  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080017b0  080017b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080017b0  080017b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080017b0  080017b0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017b0  080017b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017b0  080017b0  000117b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017b4  080017b4  000117b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080017b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000090  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000009c  2000009c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00004c1f  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001049  00000000  00000000  00024c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000004d8  00000000  00000000  00025ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000385  00000000  00000000  000261c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f1f0  00000000  00000000  00026545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000052f1  00000000  00000000  00045735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000be9f5  00000000  00000000  0004aa26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000124c  00000000  00000000  0010941c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  0010a668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001798 	.word	0x08001798

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001798 	.word	0x08001798

080001c8 <main>:
static void MX_GPIO_Init(void);
static void MX_CAN1_Init(void);
void Error_Handler(void);

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
    HAL_Init();
 80001ce:	f000 f9ed 	bl	80005ac <HAL_Init>
    SystemClock_Config();
 80001d2:	f000 f85d 	bl	8000290 <SystemClock_Config>
    MX_GPIO_Init();
 80001d6:	f000 f8a7 	bl	8000328 <MX_GPIO_Init>
    MX_CAN1_Init();
 80001da:	f000 f86f 	bl	80002bc <MX_CAN1_Init>

    HAL_CAN_Start(&hcan1);
 80001de:	481c      	ldr	r0, [pc, #112]	; (8000250 <main+0x88>)
 80001e0:	f000 fb75 	bl	80008ce <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80001e4:	2102      	movs	r1, #2
 80001e6:	481a      	ldr	r0, [pc, #104]	; (8000250 <main+0x88>)
 80001e8:	f000 fda7 	bl	8000d3a <HAL_CAN_ActivateNotification>

    TxHeader.DLC = 1;
 80001ec:	4b19      	ldr	r3, [pc, #100]	; (8000254 <main+0x8c>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	611a      	str	r2, [r3, #16]
    TxHeader.ExtId = 0;
 80001f2:	4b18      	ldr	r3, [pc, #96]	; (8000254 <main+0x8c>)
 80001f4:	2200      	movs	r2, #0
 80001f6:	605a      	str	r2, [r3, #4]
    TxHeader.IDE = CAN_ID_STD;
 80001f8:	4b16      	ldr	r3, [pc, #88]	; (8000254 <main+0x8c>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 80001fe:	4b15      	ldr	r3, [pc, #84]	; (8000254 <main+0x8c>)
 8000200:	2200      	movs	r2, #0
 8000202:	60da      	str	r2, [r3, #12]
    TxHeader.StdId = 0x111;
 8000204:	4b13      	ldr	r3, [pc, #76]	; (8000254 <main+0x8c>)
 8000206:	f240 1211 	movw	r2, #273	; 0x111
 800020a:	601a      	str	r2, [r3, #0]
    TxHeader.TransmitGlobalTime = DISABLE;
 800020c:	4b11      	ldr	r3, [pc, #68]	; (8000254 <main+0x8c>)
 800020e:	2200      	movs	r2, #0
 8000210:	751a      	strb	r2, [r3, #20]

    while (1)
    {
        for (uint8_t i = 0; i < 7; i++)
 8000212:	2300      	movs	r3, #0
 8000214:	71fb      	strb	r3, [r7, #7]
 8000216:	e016      	b.n	8000246 <main+0x7e>
        {
            TxData[0] = i + 1;
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	3301      	adds	r3, #1
 800021c:	b2da      	uxtb	r2, r3
 800021e:	4b0e      	ldr	r3, [pc, #56]	; (8000258 <main+0x90>)
 8000220:	701a      	strb	r2, [r3, #0]

            if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000222:	4b0e      	ldr	r3, [pc, #56]	; (800025c <main+0x94>)
 8000224:	4a0c      	ldr	r2, [pc, #48]	; (8000258 <main+0x90>)
 8000226:	490b      	ldr	r1, [pc, #44]	; (8000254 <main+0x8c>)
 8000228:	4809      	ldr	r0, [pc, #36]	; (8000250 <main+0x88>)
 800022a:	f000 fb94 	bl	8000956 <HAL_CAN_AddTxMessage>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d001      	beq.n	8000238 <main+0x70>
            {
                Error_Handler();
 8000234:	f000 f8bc 	bl	80003b0 <Error_Handler>
            }

            HAL_Delay(1000); // Adjust the delay as needed
 8000238:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800023c:	f000 fa28 	bl	8000690 <HAL_Delay>
        for (uint8_t i = 0; i < 7; i++)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	3301      	adds	r3, #1
 8000244:	71fb      	strb	r3, [r7, #7]
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	2b06      	cmp	r3, #6
 800024a:	d9e5      	bls.n	8000218 <main+0x50>
 800024c:	e7e1      	b.n	8000212 <main+0x4a>
 800024e:	bf00      	nop
 8000250:	20000028 	.word	0x20000028
 8000254:	20000050 	.word	0x20000050
 8000258:	20000090 	.word	0x20000090
 800025c:	20000084 	.word	0x20000084

08000260 <HAL_CAN_RxFifo0MsgPendingCallback>:
        }
    }
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
    if (hcan == &hcan1)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a06      	ldr	r2, [pc, #24]	; (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d105      	bne.n	800027c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
    {
        HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000270:	4b05      	ldr	r3, [pc, #20]	; (8000288 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000272:	4a06      	ldr	r2, [pc, #24]	; (800028c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000274:	2100      	movs	r1, #0
 8000276:	6878      	ldr	r0, [r7, #4]
 8000278:	f000 fc3d 	bl	8000af6 <HAL_CAN_GetRxMessage>
    }
}
 800027c:	bf00      	nop
 800027e:	3708      	adds	r7, #8
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000028 	.word	0x20000028
 8000288:	20000088 	.word	0x20000088
 800028c:	20000068 	.word	0x20000068

08000290 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b092      	sub	sp, #72	; 0x48
 8000294:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	f107 0318 	add.w	r3, r7, #24
 800029a:	2230      	movs	r2, #48	; 0x30
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f001 fa4e 	bl	8001740 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
 80002b0:	611a      	str	r2, [r3, #16]

    // Your clock configuration code here
}
 80002b2:	bf00      	nop
 80002b4:	3748      	adds	r7, #72	; 0x48
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
	...

080002bc <MX_CAN1_Init>:

static void MX_CAN1_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
    hcan1.Instance = CAN1;
 80002c0:	4b17      	ldr	r3, [pc, #92]	; (8000320 <MX_CAN1_Init+0x64>)
 80002c2:	4a18      	ldr	r2, [pc, #96]	; (8000324 <MX_CAN1_Init+0x68>)
 80002c4:	601a      	str	r2, [r3, #0]
    hcan1.Init.Prescaler = 2;
 80002c6:	4b16      	ldr	r3, [pc, #88]	; (8000320 <MX_CAN1_Init+0x64>)
 80002c8:	2202      	movs	r2, #2
 80002ca:	605a      	str	r2, [r3, #4]
    hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 80002cc:	4b14      	ldr	r3, [pc, #80]	; (8000320 <MX_CAN1_Init+0x64>)
 80002ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002d2:	609a      	str	r2, [r3, #8]
    hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002d4:	4b12      	ldr	r3, [pc, #72]	; (8000320 <MX_CAN1_Init+0x64>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	60da      	str	r2, [r3, #12]
    hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80002da:	4b11      	ldr	r3, [pc, #68]	; (8000320 <MX_CAN1_Init+0x64>)
 80002dc:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80002e0:	611a      	str	r2, [r3, #16]
    hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80002e2:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <MX_CAN1_Init+0x64>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	615a      	str	r2, [r3, #20]
    hcan1.Init.TimeTriggeredMode = DISABLE;
 80002e8:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <MX_CAN1_Init+0x64>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	761a      	strb	r2, [r3, #24]
    hcan1.Init.AutoBusOff = DISABLE;
 80002ee:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <MX_CAN1_Init+0x64>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	765a      	strb	r2, [r3, #25]
    hcan1.Init.AutoWakeUp = DISABLE;
 80002f4:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <MX_CAN1_Init+0x64>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	769a      	strb	r2, [r3, #26]
    hcan1.Init.AutoRetransmission = DISABLE;
 80002fa:	4b09      	ldr	r3, [pc, #36]	; (8000320 <MX_CAN1_Init+0x64>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	76da      	strb	r2, [r3, #27]
    hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000300:	4b07      	ldr	r3, [pc, #28]	; (8000320 <MX_CAN1_Init+0x64>)
 8000302:	2200      	movs	r2, #0
 8000304:	771a      	strb	r2, [r3, #28]
    hcan1.Init.TransmitFifoPriority = DISABLE;
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <MX_CAN1_Init+0x64>)
 8000308:	2200      	movs	r2, #0
 800030a:	775a      	strb	r2, [r3, #29]

    if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800030c:	4804      	ldr	r0, [pc, #16]	; (8000320 <MX_CAN1_Init+0x64>)
 800030e:	f000 f9e3 	bl	80006d8 <HAL_CAN_Init>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_CAN1_Init+0x60>
    {
        Error_Handler();
 8000318:	f000 f84a 	bl	80003b0 <Error_Handler>
    }
}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20000028 	.word	0x20000028
 8000324:	40006400 	.word	0x40006400

08000328 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000328:	b480      	push	{r7}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	4b1e      	ldr	r3, [pc, #120]	; (80003ac <MX_GPIO_Init+0x84>)
 8000334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000336:	4a1d      	ldr	r2, [pc, #116]	; (80003ac <MX_GPIO_Init+0x84>)
 8000338:	f043 0304 	orr.w	r3, r3, #4
 800033c:	6313      	str	r3, [r2, #48]	; 0x30
 800033e:	4b1b      	ldr	r3, [pc, #108]	; (80003ac <MX_GPIO_Init+0x84>)
 8000340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000342:	f003 0304 	and.w	r3, r3, #4
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800034a:	2300      	movs	r3, #0
 800034c:	60bb      	str	r3, [r7, #8]
 800034e:	4b17      	ldr	r3, [pc, #92]	; (80003ac <MX_GPIO_Init+0x84>)
 8000350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000352:	4a16      	ldr	r2, [pc, #88]	; (80003ac <MX_GPIO_Init+0x84>)
 8000354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000358:	6313      	str	r3, [r2, #48]	; 0x30
 800035a:	4b14      	ldr	r3, [pc, #80]	; (80003ac <MX_GPIO_Init+0x84>)
 800035c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000362:	60bb      	str	r3, [r7, #8]
 8000364:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000366:	2300      	movs	r3, #0
 8000368:	607b      	str	r3, [r7, #4]
 800036a:	4b10      	ldr	r3, [pc, #64]	; (80003ac <MX_GPIO_Init+0x84>)
 800036c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036e:	4a0f      	ldr	r2, [pc, #60]	; (80003ac <MX_GPIO_Init+0x84>)
 8000370:	f043 0301 	orr.w	r3, r3, #1
 8000374:	6313      	str	r3, [r2, #48]	; 0x30
 8000376:	4b0d      	ldr	r3, [pc, #52]	; (80003ac <MX_GPIO_Init+0x84>)
 8000378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037a:	f003 0301 	and.w	r3, r3, #1
 800037e:	607b      	str	r3, [r7, #4]
 8000380:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000382:	2300      	movs	r3, #0
 8000384:	603b      	str	r3, [r7, #0]
 8000386:	4b09      	ldr	r3, [pc, #36]	; (80003ac <MX_GPIO_Init+0x84>)
 8000388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038a:	4a08      	ldr	r2, [pc, #32]	; (80003ac <MX_GPIO_Init+0x84>)
 800038c:	f043 0302 	orr.w	r3, r3, #2
 8000390:	6313      	str	r3, [r2, #48]	; 0x30
 8000392:	4b06      	ldr	r3, [pc, #24]	; (80003ac <MX_GPIO_Init+0x84>)
 8000394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000396:	f003 0302 	and.w	r3, r3, #2
 800039a:	603b      	str	r3, [r7, #0]
 800039c:	683b      	ldr	r3, [r7, #0]

    // Your GPIO initialization code here
}
 800039e:	bf00      	nop
 80003a0:	3714      	adds	r7, #20
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40023800 	.word	0x40023800

080003b0 <Error_Handler>:

void Error_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
    while (1)
 80003b4:	e7fe      	b.n	80003b4 <Error_Handler+0x4>
	...

080003b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003be:	2300      	movs	r3, #0
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	4b10      	ldr	r3, [pc, #64]	; (8000404 <HAL_MspInit+0x4c>)
 80003c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003c6:	4a0f      	ldr	r2, [pc, #60]	; (8000404 <HAL_MspInit+0x4c>)
 80003c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003cc:	6453      	str	r3, [r2, #68]	; 0x44
 80003ce:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <HAL_MspInit+0x4c>)
 80003d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003d6:	607b      	str	r3, [r7, #4]
 80003d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003da:	2300      	movs	r3, #0
 80003dc:	603b      	str	r3, [r7, #0]
 80003de:	4b09      	ldr	r3, [pc, #36]	; (8000404 <HAL_MspInit+0x4c>)
 80003e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003e2:	4a08      	ldr	r2, [pc, #32]	; (8000404 <HAL_MspInit+0x4c>)
 80003e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003e8:	6413      	str	r3, [r2, #64]	; 0x40
 80003ea:	4b06      	ldr	r3, [pc, #24]	; (8000404 <HAL_MspInit+0x4c>)
 80003ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003f2:	603b      	str	r3, [r7, #0]
 80003f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	40023800 	.word	0x40023800

08000408 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b08a      	sub	sp, #40	; 0x28
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000410:	f107 0314 	add.w	r3, r7, #20
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	605a      	str	r2, [r3, #4]
 800041a:	609a      	str	r2, [r3, #8]
 800041c:	60da      	str	r2, [r3, #12]
 800041e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a21      	ldr	r2, [pc, #132]	; (80004ac <HAL_CAN_MspInit+0xa4>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d13b      	bne.n	80004a2 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800042a:	2300      	movs	r3, #0
 800042c:	613b      	str	r3, [r7, #16]
 800042e:	4b20      	ldr	r3, [pc, #128]	; (80004b0 <HAL_CAN_MspInit+0xa8>)
 8000430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000432:	4a1f      	ldr	r2, [pc, #124]	; (80004b0 <HAL_CAN_MspInit+0xa8>)
 8000434:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000438:	6413      	str	r3, [r2, #64]	; 0x40
 800043a:	4b1d      	ldr	r3, [pc, #116]	; (80004b0 <HAL_CAN_MspInit+0xa8>)
 800043c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800043e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000442:	613b      	str	r3, [r7, #16]
 8000444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000446:	2300      	movs	r3, #0
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <HAL_CAN_MspInit+0xa8>)
 800044c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044e:	4a18      	ldr	r2, [pc, #96]	; (80004b0 <HAL_CAN_MspInit+0xa8>)
 8000450:	f043 0308 	orr.w	r3, r3, #8
 8000454:	6313      	str	r3, [r2, #48]	; 0x30
 8000456:	4b16      	ldr	r3, [pc, #88]	; (80004b0 <HAL_CAN_MspInit+0xa8>)
 8000458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045a:	f003 0308 	and.w	r3, r3, #8
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000462:	2303      	movs	r3, #3
 8000464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000466:	2302      	movs	r3, #2
 8000468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	2300      	movs	r3, #0
 800046c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800046e:	2303      	movs	r3, #3
 8000470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000472:	2309      	movs	r3, #9
 8000474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000476:	f107 0314 	add.w	r3, r7, #20
 800047a:	4619      	mov	r1, r3
 800047c:	480d      	ldr	r0, [pc, #52]	; (80004b4 <HAL_CAN_MspInit+0xac>)
 800047e:	f000 ffc3 	bl	8001408 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000482:	2200      	movs	r2, #0
 8000484:	2100      	movs	r1, #0
 8000486:	2014      	movs	r0, #20
 8000488:	f000 ff87 	bl	800139a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800048c:	2014      	movs	r0, #20
 800048e:	f000 ffa0 	bl	80013d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000492:	2200      	movs	r2, #0
 8000494:	2100      	movs	r1, #0
 8000496:	2015      	movs	r0, #21
 8000498:	f000 ff7f 	bl	800139a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800049c:	2015      	movs	r0, #21
 800049e:	f000 ff98 	bl	80013d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80004a2:	bf00      	nop
 80004a4:	3728      	adds	r7, #40	; 0x28
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	40006400 	.word	0x40006400
 80004b0:	40023800 	.word	0x40023800
 80004b4:	40020c00 	.word	0x40020c00

080004b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004bc:	e7fe      	b.n	80004bc <NMI_Handler+0x4>

080004be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004c2:	e7fe      	b.n	80004c2 <HardFault_Handler+0x4>

080004c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <MemManage_Handler+0x4>

080004ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ce:	e7fe      	b.n	80004ce <BusFault_Handler+0x4>

080004d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <UsageFault_Handler+0x4>

080004d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr

080004f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004f6:	bf00      	nop
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000504:	f000 f8a4 	bl	8000650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}

0800050c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000510:	4802      	ldr	r0, [pc, #8]	; (800051c <CAN1_RX0_IRQHandler+0x10>)
 8000512:	f000 fc38 	bl	8000d86 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000028 	.word	0x20000028

08000520 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000524:	4802      	ldr	r0, [pc, #8]	; (8000530 <CAN1_RX1_IRQHandler+0x10>)
 8000526:	f000 fc2e 	bl	8000d86 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000028 	.word	0x20000028

08000534 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <SystemInit+0x20>)
 800053a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800053e:	4a05      	ldr	r2, [pc, #20]	; (8000554 <SystemInit+0x20>)
 8000540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000544:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000558:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000590 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800055c:	f7ff ffea 	bl	8000534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000560:	480c      	ldr	r0, [pc, #48]	; (8000594 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000562:	490d      	ldr	r1, [pc, #52]	; (8000598 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000564:	4a0d      	ldr	r2, [pc, #52]	; (800059c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000568:	e002      	b.n	8000570 <LoopCopyDataInit>

0800056a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800056a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800056c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800056e:	3304      	adds	r3, #4

08000570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000574:	d3f9      	bcc.n	800056a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000576:	4a0a      	ldr	r2, [pc, #40]	; (80005a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000578:	4c0a      	ldr	r4, [pc, #40]	; (80005a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800057a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800057c:	e001      	b.n	8000582 <LoopFillZerobss>

0800057e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800057e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000580:	3204      	adds	r2, #4

08000582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000584:	d3fb      	bcc.n	800057e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000586:	f001 f8e3 	bl	8001750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800058a:	f7ff fe1d 	bl	80001c8 <main>
  bx  lr    
 800058e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000590:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000598:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800059c:	080017b8 	.word	0x080017b8
  ldr r2, =_sbss
 80005a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005a4:	2000009c 	.word	0x2000009c

080005a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005a8:	e7fe      	b.n	80005a8 <ADC_IRQHandler>
	...

080005ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005b0:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <HAL_Init+0x40>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a0d      	ldr	r2, [pc, #52]	; (80005ec <HAL_Init+0x40>)
 80005b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <HAL_Init+0x40>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a0a      	ldr	r2, [pc, #40]	; (80005ec <HAL_Init+0x40>)
 80005c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <HAL_Init+0x40>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a07      	ldr	r2, [pc, #28]	; (80005ec <HAL_Init+0x40>)
 80005ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d4:	2003      	movs	r0, #3
 80005d6:	f000 fed5 	bl	8001384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005da:	200f      	movs	r0, #15
 80005dc:	f000 f808 	bl	80005f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e0:	f7ff feea 	bl	80003b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005e4:	2300      	movs	r3, #0
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023c00 	.word	0x40023c00

080005f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <HAL_InitTick+0x54>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_InitTick+0x58>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4619      	mov	r1, r3
 8000602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000606:	fbb3 f3f1 	udiv	r3, r3, r1
 800060a:	fbb2 f3f3 	udiv	r3, r2, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f000 feed 	bl	80013ee <HAL_SYSTICK_Config>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800061a:	2301      	movs	r3, #1
 800061c:	e00e      	b.n	800063c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b0f      	cmp	r3, #15
 8000622:	d80a      	bhi.n	800063a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000624:	2200      	movs	r2, #0
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	f04f 30ff 	mov.w	r0, #4294967295
 800062c:	f000 feb5 	bl	800139a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000630:	4a06      	ldr	r2, [pc, #24]	; (800064c <HAL_InitTick+0x5c>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000636:	2300      	movs	r3, #0
 8000638:	e000      	b.n	800063c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800063a:	2301      	movs	r3, #1
}
 800063c:	4618      	mov	r0, r3
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000000 	.word	0x20000000
 8000648:	20000008 	.word	0x20000008
 800064c:	20000004 	.word	0x20000004

08000650 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <HAL_IncTick+0x20>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_IncTick+0x24>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4413      	add	r3, r2
 8000660:	4a04      	ldr	r2, [pc, #16]	; (8000674 <HAL_IncTick+0x24>)
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000008 	.word	0x20000008
 8000674:	20000098 	.word	0x20000098

08000678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return uwTick;
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <HAL_GetTick+0x14>)
 800067e:	681b      	ldr	r3, [r3, #0]
}
 8000680:	4618      	mov	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000098 	.word	0x20000098

08000690 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000698:	f7ff ffee 	bl	8000678 <HAL_GetTick>
 800069c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006a8:	d005      	beq.n	80006b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006aa:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <HAL_Delay+0x44>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	461a      	mov	r2, r3
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006b6:	bf00      	nop
 80006b8:	f7ff ffde 	bl	8000678 <HAL_GetTick>
 80006bc:	4602      	mov	r2, r0
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d8f7      	bhi.n	80006b8 <HAL_Delay+0x28>
  {
  }
}
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000008 	.word	0x20000008

080006d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d101      	bne.n	80006ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80006e6:	2301      	movs	r3, #1
 80006e8:	e0ed      	b.n	80008c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d102      	bne.n	80006fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff fe86 	bl	8000408 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f042 0201 	orr.w	r2, r2, #1
 800070a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800070c:	f7ff ffb4 	bl	8000678 <HAL_GetTick>
 8000710:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000712:	e012      	b.n	800073a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000714:	f7ff ffb0 	bl	8000678 <HAL_GetTick>
 8000718:	4602      	mov	r2, r0
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	2b0a      	cmp	r3, #10
 8000720:	d90b      	bls.n	800073a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000726:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2205      	movs	r2, #5
 8000732:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
 8000738:	e0c5      	b.n	80008c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	f003 0301 	and.w	r3, r3, #1
 8000744:	2b00      	cmp	r3, #0
 8000746:	d0e5      	beq.n	8000714 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f022 0202 	bic.w	r2, r2, #2
 8000756:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000758:	f7ff ff8e 	bl	8000678 <HAL_GetTick>
 800075c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800075e:	e012      	b.n	8000786 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000760:	f7ff ff8a 	bl	8000678 <HAL_GetTick>
 8000764:	4602      	mov	r2, r0
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	2b0a      	cmp	r3, #10
 800076c:	d90b      	bls.n	8000786 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000772:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2205      	movs	r2, #5
 800077e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000782:	2301      	movs	r3, #1
 8000784:	e09f      	b.n	80008c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	f003 0302 	and.w	r3, r3, #2
 8000790:	2b00      	cmp	r3, #0
 8000792:	d1e5      	bne.n	8000760 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	7e1b      	ldrb	r3, [r3, #24]
 8000798:	2b01      	cmp	r3, #1
 800079a:	d108      	bne.n	80007ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	e007      	b.n	80007be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80007bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	7e5b      	ldrb	r3, [r3, #25]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d108      	bne.n	80007d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	e007      	b.n	80007e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80007e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	7e9b      	ldrb	r3, [r3, #26]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d108      	bne.n	8000802 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f042 0220 	orr.w	r2, r2, #32
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	e007      	b.n	8000812 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f022 0220 	bic.w	r2, r2, #32
 8000810:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	7edb      	ldrb	r3, [r3, #27]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d108      	bne.n	800082c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f022 0210 	bic.w	r2, r2, #16
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	e007      	b.n	800083c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f042 0210 	orr.w	r2, r2, #16
 800083a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	7f1b      	ldrb	r3, [r3, #28]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d108      	bne.n	8000856 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f042 0208 	orr.w	r2, r2, #8
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	e007      	b.n	8000866 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f022 0208 	bic.w	r2, r2, #8
 8000864:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	7f5b      	ldrb	r3, [r3, #29]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d108      	bne.n	8000880 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f042 0204 	orr.w	r2, r2, #4
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	e007      	b.n	8000890 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f022 0204 	bic.w	r2, r2, #4
 800088e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	689a      	ldr	r2, [r3, #8]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	431a      	orrs	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	691b      	ldr	r3, [r3, #16]
 800089e:	431a      	orrs	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	695b      	ldr	r3, [r3, #20]
 80008a4:	ea42 0103 	orr.w	r1, r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	1e5a      	subs	r2, r3, #1
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	430a      	orrs	r2, r1
 80008b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2200      	movs	r2, #0
 80008ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2201      	movs	r2, #1
 80008c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b084      	sub	sp, #16
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d12e      	bne.n	8000940 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2202      	movs	r2, #2
 80008e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f022 0201 	bic.w	r2, r2, #1
 80008f8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80008fa:	f7ff febd 	bl	8000678 <HAL_GetTick>
 80008fe:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000900:	e012      	b.n	8000928 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000902:	f7ff feb9 	bl	8000678 <HAL_GetTick>
 8000906:	4602      	mov	r2, r0
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	2b0a      	cmp	r3, #10
 800090e:	d90b      	bls.n	8000928 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000914:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2205      	movs	r2, #5
 8000920:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000924:	2301      	movs	r3, #1
 8000926:	e012      	b.n	800094e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	2b00      	cmp	r3, #0
 8000934:	d1e5      	bne.n	8000902 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2200      	movs	r2, #0
 800093a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800093c:	2300      	movs	r3, #0
 800093e:	e006      	b.n	800094e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000944:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800094c:	2301      	movs	r3, #1
  }
}
 800094e:	4618      	mov	r0, r3
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000956:	b480      	push	{r7}
 8000958:	b089      	sub	sp, #36	; 0x24
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]
 8000962:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f893 3020 	ldrb.w	r3, [r3, #32]
 800096a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000974:	7ffb      	ldrb	r3, [r7, #31]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d003      	beq.n	8000982 <HAL_CAN_AddTxMessage+0x2c>
 800097a:	7ffb      	ldrb	r3, [r7, #31]
 800097c:	2b02      	cmp	r3, #2
 800097e:	f040 80ad 	bne.w	8000adc <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000982:	69bb      	ldr	r3, [r7, #24]
 8000984:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000988:	2b00      	cmp	r3, #0
 800098a:	d10a      	bne.n	80009a2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000992:	2b00      	cmp	r3, #0
 8000994:	d105      	bne.n	80009a2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800099c:	2b00      	cmp	r3, #0
 800099e:	f000 8095 	beq.w	8000acc <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80009a2:	69bb      	ldr	r3, [r7, #24]
 80009a4:	0e1b      	lsrs	r3, r3, #24
 80009a6:	f003 0303 	and.w	r3, r3, #3
 80009aa:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80009ac:	2201      	movs	r2, #1
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	409a      	lsls	r2, r3
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d10d      	bne.n	80009da <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80009c8:	68f9      	ldr	r1, [r7, #12]
 80009ca:	6809      	ldr	r1, [r1, #0]
 80009cc:	431a      	orrs	r2, r3
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	3318      	adds	r3, #24
 80009d2:	011b      	lsls	r3, r3, #4
 80009d4:	440b      	add	r3, r1
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	e00f      	b.n	80009fa <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80009e4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80009ea:	68f9      	ldr	r1, [r7, #12]
 80009ec:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80009ee:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	3318      	adds	r3, #24
 80009f4:	011b      	lsls	r3, r3, #4
 80009f6:	440b      	add	r3, r1
 80009f8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	6819      	ldr	r1, [r3, #0]
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	691a      	ldr	r2, [r3, #16]
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	3318      	adds	r3, #24
 8000a06:	011b      	lsls	r3, r3, #4
 8000a08:	440b      	add	r3, r1
 8000a0a:	3304      	adds	r3, #4
 8000a0c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	7d1b      	ldrb	r3, [r3, #20]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d111      	bne.n	8000a3a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	3318      	adds	r3, #24
 8000a1e:	011b      	lsls	r3, r3, #4
 8000a20:	4413      	add	r3, r2
 8000a22:	3304      	adds	r3, #4
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	6811      	ldr	r1, [r2, #0]
 8000a2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	3318      	adds	r3, #24
 8000a32:	011b      	lsls	r3, r3, #4
 8000a34:	440b      	add	r3, r1
 8000a36:	3304      	adds	r3, #4
 8000a38:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	3307      	adds	r3, #7
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	061a      	lsls	r2, r3, #24
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3306      	adds	r3, #6
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	041b      	lsls	r3, r3, #16
 8000a4a:	431a      	orrs	r2, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3305      	adds	r3, #5
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	021b      	lsls	r3, r3, #8
 8000a54:	4313      	orrs	r3, r2
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	3204      	adds	r2, #4
 8000a5a:	7812      	ldrb	r2, [r2, #0]
 8000a5c:	4610      	mov	r0, r2
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	6811      	ldr	r1, [r2, #0]
 8000a62:	ea43 0200 	orr.w	r2, r3, r0
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	011b      	lsls	r3, r3, #4
 8000a6a:	440b      	add	r3, r1
 8000a6c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000a70:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	3303      	adds	r3, #3
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	061a      	lsls	r2, r3, #24
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	3302      	adds	r3, #2
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	041b      	lsls	r3, r3, #16
 8000a82:	431a      	orrs	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3301      	adds	r3, #1
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	021b      	lsls	r3, r3, #8
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	7812      	ldrb	r2, [r2, #0]
 8000a92:	4610      	mov	r0, r2
 8000a94:	68fa      	ldr	r2, [r7, #12]
 8000a96:	6811      	ldr	r1, [r2, #0]
 8000a98:	ea43 0200 	orr.w	r2, r3, r0
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	011b      	lsls	r3, r3, #4
 8000aa0:	440b      	add	r3, r1
 8000aa2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000aa6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	3318      	adds	r3, #24
 8000ab0:	011b      	lsls	r3, r3, #4
 8000ab2:	4413      	add	r3, r2
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	6811      	ldr	r1, [r2, #0]
 8000aba:	f043 0201 	orr.w	r2, r3, #1
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	3318      	adds	r3, #24
 8000ac2:	011b      	lsls	r3, r3, #4
 8000ac4:	440b      	add	r3, r1
 8000ac6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	e00e      	b.n	8000aea <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e006      	b.n	8000aea <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ae8:	2301      	movs	r3, #1
  }
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3724      	adds	r7, #36	; 0x24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000af6:	b480      	push	{r7}
 8000af8:	b087      	sub	sp, #28
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	60f8      	str	r0, [r7, #12]
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
 8000b02:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b0a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b0c:	7dfb      	ldrb	r3, [r7, #23]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d003      	beq.n	8000b1a <HAL_CAN_GetRxMessage+0x24>
 8000b12:	7dfb      	ldrb	r3, [r7, #23]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	f040 8103 	bne.w	8000d20 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d10e      	bne.n	8000b3e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	f003 0303 	and.w	r3, r3, #3
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d116      	bne.n	8000b5c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e0f7      	b.n	8000d2e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	691b      	ldr	r3, [r3, #16]
 8000b44:	f003 0303 	and.w	r3, r3, #3
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d107      	bne.n	8000b5c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b50:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e0e8      	b.n	8000d2e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	331b      	adds	r3, #27
 8000b64:	011b      	lsls	r3, r3, #4
 8000b66:	4413      	add	r3, r2
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f003 0204 	and.w	r2, r3, #4
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d10c      	bne.n	8000b94 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	331b      	adds	r3, #27
 8000b82:	011b      	lsls	r3, r3, #4
 8000b84:	4413      	add	r3, r2
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	0d5b      	lsrs	r3, r3, #21
 8000b8a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	e00b      	b.n	8000bac <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	331b      	adds	r3, #27
 8000b9c:	011b      	lsls	r3, r3, #4
 8000b9e:	4413      	add	r3, r2
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	08db      	lsrs	r3, r3, #3
 8000ba4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	331b      	adds	r3, #27
 8000bb4:	011b      	lsls	r3, r3, #4
 8000bb6:	4413      	add	r3, r2
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f003 0202 	and.w	r2, r3, #2
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	331b      	adds	r3, #27
 8000bca:	011b      	lsls	r3, r3, #4
 8000bcc:	4413      	add	r3, r2
 8000bce:	3304      	adds	r3, #4
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f003 0308 	and.w	r3, r3, #8
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d003      	beq.n	8000be2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2208      	movs	r2, #8
 8000bde:	611a      	str	r2, [r3, #16]
 8000be0:	e00b      	b.n	8000bfa <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	331b      	adds	r3, #27
 8000bea:	011b      	lsls	r3, r3, #4
 8000bec:	4413      	add	r3, r2
 8000bee:	3304      	adds	r3, #4
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f003 020f 	and.w	r2, r3, #15
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	331b      	adds	r3, #27
 8000c02:	011b      	lsls	r3, r3, #4
 8000c04:	4413      	add	r3, r2
 8000c06:	3304      	adds	r3, #4
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	0a1b      	lsrs	r3, r3, #8
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	331b      	adds	r3, #27
 8000c1a:	011b      	lsls	r3, r3, #4
 8000c1c:	4413      	add	r3, r2
 8000c1e:	3304      	adds	r3, #4
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	0c1b      	lsrs	r3, r3, #16
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	4413      	add	r3, r2
 8000c34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	011b      	lsls	r3, r3, #4
 8000c48:	4413      	add	r3, r2
 8000c4a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	0a1a      	lsrs	r2, r3, #8
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	3301      	adds	r3, #1
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	011b      	lsls	r3, r3, #4
 8000c62:	4413      	add	r3, r2
 8000c64:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	0c1a      	lsrs	r2, r3, #16
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	3302      	adds	r3, #2
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	011b      	lsls	r3, r3, #4
 8000c7c:	4413      	add	r3, r2
 8000c7e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	0e1a      	lsrs	r2, r3, #24
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	3303      	adds	r3, #3
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	011b      	lsls	r3, r3, #4
 8000c96:	4413      	add	r3, r2
 8000c98:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	011b      	lsls	r3, r3, #4
 8000cae:	4413      	add	r3, r2
 8000cb0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	0a1a      	lsrs	r2, r3, #8
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	3305      	adds	r3, #5
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	011b      	lsls	r3, r3, #4
 8000cc8:	4413      	add	r3, r2
 8000cca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	0c1a      	lsrs	r2, r3, #16
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	3306      	adds	r3, #6
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	011b      	lsls	r3, r3, #4
 8000ce2:	4413      	add	r3, r2
 8000ce4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	0e1a      	lsrs	r2, r3, #24
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	3307      	adds	r3, #7
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d108      	bne.n	8000d0c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68da      	ldr	r2, [r3, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f042 0220 	orr.w	r2, r2, #32
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	e007      	b.n	8000d1c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	691a      	ldr	r2, [r3, #16]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f042 0220 	orr.w	r2, r2, #32
 8000d1a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	e006      	b.n	8000d2e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d24:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
  }
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	371c      	adds	r7, #28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b085      	sub	sp, #20
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
 8000d42:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d4a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d002      	beq.n	8000d58 <HAL_CAN_ActivateNotification+0x1e>
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d109      	bne.n	8000d6c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	6959      	ldr	r1, [r3, #20]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	683a      	ldr	r2, [r7, #0]
 8000d64:	430a      	orrs	r2, r1
 8000d66:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	e006      	b.n	8000d7a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
  }
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b08a      	sub	sp, #40	; 0x28
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	695b      	ldr	r3, [r3, #20]
 8000d98:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	691b      	ldr	r3, [r3, #16]
 8000db8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000dc2:	6a3b      	ldr	r3, [r7, #32]
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d07c      	beq.n	8000ec6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d023      	beq.n	8000e1e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2201      	movs	r2, #1
 8000ddc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f000 f983 	bl	80010f4 <HAL_CAN_TxMailbox0CompleteCallback>
 8000dee:	e016      	b.n	8000e1e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	f003 0304 	and.w	r3, r3, #4
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d004      	beq.n	8000e04 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
 8000e02:	e00c      	b.n	8000e1e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	f003 0308 	and.w	r3, r3, #8
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d004      	beq.n	8000e18 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
 8000e16:	e002      	b.n	8000e1e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f000 f989 	bl	8001130 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d024      	beq.n	8000e72 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e30:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f000 f963 	bl	8001108 <HAL_CAN_TxMailbox1CompleteCallback>
 8000e42:	e016      	b.n	8000e72 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d004      	beq.n	8000e58 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
 8000e56:	e00c      	b.n	8000e72 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d004      	beq.n	8000e6c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
 8000e6a:	e002      	b.n	8000e72 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f000 f969 	bl	8001144 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d024      	beq.n	8000ec6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e84:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f000 f943 	bl	800111c <HAL_CAN_TxMailbox2CompleteCallback>
 8000e96:	e016      	b.n	8000ec6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d004      	beq.n	8000eac <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eaa:	e00c      	b.n	8000ec6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d004      	beq.n	8000ec0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ebe:	e002      	b.n	8000ec6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f000 f949 	bl	8001158 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000ec6:	6a3b      	ldr	r3, [r7, #32]
 8000ec8:	f003 0308 	and.w	r3, r3, #8
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d00c      	beq.n	8000eea <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	f003 0310 	and.w	r3, r3, #16
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d007      	beq.n	8000eea <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2210      	movs	r2, #16
 8000ee8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000eea:	6a3b      	ldr	r3, [r7, #32]
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d00b      	beq.n	8000f0c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	f003 0308 	and.w	r3, r3, #8
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d006      	beq.n	8000f0c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2208      	movs	r2, #8
 8000f04:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f000 f930 	bl	800116c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d009      	beq.n	8000f2a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d002      	beq.n	8000f2a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff f99b 	bl	8000260 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000f2a:	6a3b      	ldr	r3, [r7, #32]
 8000f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d00c      	beq.n	8000f4e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	f003 0310 	and.w	r3, r3, #16
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d007      	beq.n	8000f4e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2210      	movs	r2, #16
 8000f4c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000f4e:	6a3b      	ldr	r3, [r7, #32]
 8000f50:	f003 0320 	and.w	r3, r3, #32
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d00b      	beq.n	8000f70 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	f003 0308 	and.w	r3, r3, #8
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d006      	beq.n	8000f70 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2208      	movs	r2, #8
 8000f68:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 f912 	bl	8001194 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000f70:	6a3b      	ldr	r3, [r7, #32]
 8000f72:	f003 0310 	and.w	r3, r3, #16
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d009      	beq.n	8000f8e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	691b      	ldr	r3, [r3, #16]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d002      	beq.n	8000f8e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 f8f9 	bl	8001180 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000f8e:	6a3b      	ldr	r3, [r7, #32]
 8000f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d00b      	beq.n	8000fb0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f003 0310 	and.w	r3, r3, #16
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d006      	beq.n	8000fb0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2210      	movs	r2, #16
 8000fa8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 f8fc 	bl	80011a8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000fb0:	6a3b      	ldr	r3, [r7, #32]
 8000fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d00b      	beq.n	8000fd2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	f003 0308 	and.w	r3, r3, #8
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d006      	beq.n	8000fd2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2208      	movs	r2, #8
 8000fca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 f8f5 	bl	80011bc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000fd2:	6a3b      	ldr	r3, [r7, #32]
 8000fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d07b      	beq.n	80010d4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d072      	beq.n	80010cc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000fe6:	6a3b      	ldr	r3, [r7, #32]
 8000fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d008      	beq.n	8001002 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001002:	6a3b      	ldr	r3, [r7, #32]
 8001004:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001008:	2b00      	cmp	r3, #0
 800100a:	d008      	beq.n	800101e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800101e:	6a3b      	ldr	r3, [r7, #32]
 8001020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001024:	2b00      	cmp	r3, #0
 8001026:	d008      	beq.n	800103a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800103a:	6a3b      	ldr	r3, [r7, #32]
 800103c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001040:	2b00      	cmp	r3, #0
 8001042:	d043      	beq.n	80010cc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800104a:	2b00      	cmp	r3, #0
 800104c:	d03e      	beq.n	80010cc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001054:	2b60      	cmp	r3, #96	; 0x60
 8001056:	d02b      	beq.n	80010b0 <HAL_CAN_IRQHandler+0x32a>
 8001058:	2b60      	cmp	r3, #96	; 0x60
 800105a:	d82e      	bhi.n	80010ba <HAL_CAN_IRQHandler+0x334>
 800105c:	2b50      	cmp	r3, #80	; 0x50
 800105e:	d022      	beq.n	80010a6 <HAL_CAN_IRQHandler+0x320>
 8001060:	2b50      	cmp	r3, #80	; 0x50
 8001062:	d82a      	bhi.n	80010ba <HAL_CAN_IRQHandler+0x334>
 8001064:	2b40      	cmp	r3, #64	; 0x40
 8001066:	d019      	beq.n	800109c <HAL_CAN_IRQHandler+0x316>
 8001068:	2b40      	cmp	r3, #64	; 0x40
 800106a:	d826      	bhi.n	80010ba <HAL_CAN_IRQHandler+0x334>
 800106c:	2b30      	cmp	r3, #48	; 0x30
 800106e:	d010      	beq.n	8001092 <HAL_CAN_IRQHandler+0x30c>
 8001070:	2b30      	cmp	r3, #48	; 0x30
 8001072:	d822      	bhi.n	80010ba <HAL_CAN_IRQHandler+0x334>
 8001074:	2b10      	cmp	r3, #16
 8001076:	d002      	beq.n	800107e <HAL_CAN_IRQHandler+0x2f8>
 8001078:	2b20      	cmp	r3, #32
 800107a:	d005      	beq.n	8001088 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800107c:	e01d      	b.n	80010ba <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001080:	f043 0308 	orr.w	r3, r3, #8
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001086:	e019      	b.n	80010bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108a:	f043 0310 	orr.w	r3, r3, #16
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001090:	e014      	b.n	80010bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001094:	f043 0320 	orr.w	r3, r3, #32
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800109a:	e00f      	b.n	80010bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010a4:	e00a      	b.n	80010bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80010a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010ae:	e005      	b.n	80010bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80010b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010b8:	e000      	b.n	80010bc <HAL_CAN_IRQHandler+0x336>
            break;
 80010ba:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	699a      	ldr	r2, [r3, #24]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80010ca:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2204      	movs	r2, #4
 80010d2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d008      	beq.n	80010ec <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e0:	431a      	orrs	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f872 	bl	80011d0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80010ec:	bf00      	nop
 80010ee:	3728      	adds	r7, #40	; 0x28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001200:	4013      	ands	r3, r2
 8001202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800120c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001216:	4a04      	ldr	r2, [pc, #16]	; (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	60d3      	str	r3, [r2, #12]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <__NVIC_GetPriorityGrouping+0x18>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	f003 0307 	and.w	r3, r3, #7
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	2b00      	cmp	r3, #0
 8001258:	db0b      	blt.n	8001272 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	f003 021f 	and.w	r2, r3, #31
 8001260:	4907      	ldr	r1, [pc, #28]	; (8001280 <__NVIC_EnableIRQ+0x38>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	095b      	lsrs	r3, r3, #5
 8001268:	2001      	movs	r0, #1
 800126a:	fa00 f202 	lsl.w	r2, r0, r2
 800126e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000e100 	.word	0xe000e100

08001284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	db0a      	blt.n	80012ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	b2da      	uxtb	r2, r3
 800129c:	490c      	ldr	r1, [pc, #48]	; (80012d0 <__NVIC_SetPriority+0x4c>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	0112      	lsls	r2, r2, #4
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ac:	e00a      	b.n	80012c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4908      	ldr	r1, [pc, #32]	; (80012d4 <__NVIC_SetPriority+0x50>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	3b04      	subs	r3, #4
 80012bc:	0112      	lsls	r2, r2, #4
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	440b      	add	r3, r1
 80012c2:	761a      	strb	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	; 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f1c3 0307 	rsb	r3, r3, #7
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	bf28      	it	cs
 80012f6:	2304      	movcs	r3, #4
 80012f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3304      	adds	r3, #4
 80012fe:	2b06      	cmp	r3, #6
 8001300:	d902      	bls.n	8001308 <NVIC_EncodePriority+0x30>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3b03      	subs	r3, #3
 8001306:	e000      	b.n	800130a <NVIC_EncodePriority+0x32>
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	f04f 32ff 	mov.w	r2, #4294967295
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43da      	mvns	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001320:	f04f 31ff 	mov.w	r1, #4294967295
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	43d9      	mvns	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	4313      	orrs	r3, r2
         );
}
 8001332:	4618      	mov	r0, r3
 8001334:	3724      	adds	r7, #36	; 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001350:	d301      	bcc.n	8001356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001352:	2301      	movs	r3, #1
 8001354:	e00f      	b.n	8001376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001356:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <SysTick_Config+0x40>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135e:	210f      	movs	r1, #15
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	f7ff ff8e 	bl	8001284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <SysTick_Config+0x40>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136e:	4b04      	ldr	r3, [pc, #16]	; (8001380 <SysTick_Config+0x40>)
 8001370:	2207      	movs	r2, #7
 8001372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	e000e010 	.word	0xe000e010

08001384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ff29 	bl	80011e4 <__NVIC_SetPriorityGrouping>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ac:	f7ff ff3e 	bl	800122c <__NVIC_GetPriorityGrouping>
 80013b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	6978      	ldr	r0, [r7, #20]
 80013b8:	f7ff ff8e 	bl	80012d8 <NVIC_EncodePriority>
 80013bc:	4602      	mov	r2, r0
 80013be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff5d 	bl	8001284 <__NVIC_SetPriority>
}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff31 	bl	8001248 <__NVIC_EnableIRQ>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ffa2 	bl	8001340 <SysTick_Config>
 80013fc:	4603      	mov	r3, r0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
 8001422:	e16b      	b.n	80016fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001424:	2201      	movs	r2, #1
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	429a      	cmp	r2, r3
 800143e:	f040 815a 	bne.w	80016f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	2b01      	cmp	r3, #1
 800144c:	d005      	beq.n	800145a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001456:	2b02      	cmp	r3, #2
 8001458:	d130      	bne.n	80014bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	2203      	movs	r2, #3
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	68da      	ldr	r2, [r3, #12]
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001490:	2201      	movs	r2, #1
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	091b      	lsrs	r3, r3, #4
 80014a6:	f003 0201 	and.w	r2, r3, #1
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	d017      	beq.n	80014f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	2203      	movs	r2, #3
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d123      	bne.n	800154c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	08da      	lsrs	r2, r3, #3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3208      	adds	r2, #8
 800150c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	220f      	movs	r2, #15
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	691a      	ldr	r2, [r3, #16]
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	08da      	lsrs	r2, r3, #3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3208      	adds	r2, #8
 8001546:	69b9      	ldr	r1, [r7, #24]
 8001548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	2203      	movs	r2, #3
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0203 	and.w	r2, r3, #3
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 80b4 	beq.w	80016f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b60      	ldr	r3, [pc, #384]	; (8001714 <HAL_GPIO_Init+0x30c>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	4a5f      	ldr	r2, [pc, #380]	; (8001714 <HAL_GPIO_Init+0x30c>)
 8001598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159c:	6453      	str	r3, [r2, #68]	; 0x44
 800159e:	4b5d      	ldr	r3, [pc, #372]	; (8001714 <HAL_GPIO_Init+0x30c>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015aa:	4a5b      	ldr	r2, [pc, #364]	; (8001718 <HAL_GPIO_Init+0x310>)
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	089b      	lsrs	r3, r3, #2
 80015b0:	3302      	adds	r3, #2
 80015b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	220f      	movs	r2, #15
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a52      	ldr	r2, [pc, #328]	; (800171c <HAL_GPIO_Init+0x314>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d02b      	beq.n	800162e <HAL_GPIO_Init+0x226>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a51      	ldr	r2, [pc, #324]	; (8001720 <HAL_GPIO_Init+0x318>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d025      	beq.n	800162a <HAL_GPIO_Init+0x222>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a50      	ldr	r2, [pc, #320]	; (8001724 <HAL_GPIO_Init+0x31c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d01f      	beq.n	8001626 <HAL_GPIO_Init+0x21e>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a4f      	ldr	r2, [pc, #316]	; (8001728 <HAL_GPIO_Init+0x320>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d019      	beq.n	8001622 <HAL_GPIO_Init+0x21a>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a4e      	ldr	r2, [pc, #312]	; (800172c <HAL_GPIO_Init+0x324>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d013      	beq.n	800161e <HAL_GPIO_Init+0x216>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4d      	ldr	r2, [pc, #308]	; (8001730 <HAL_GPIO_Init+0x328>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d00d      	beq.n	800161a <HAL_GPIO_Init+0x212>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4c      	ldr	r2, [pc, #304]	; (8001734 <HAL_GPIO_Init+0x32c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d007      	beq.n	8001616 <HAL_GPIO_Init+0x20e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4b      	ldr	r2, [pc, #300]	; (8001738 <HAL_GPIO_Init+0x330>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d101      	bne.n	8001612 <HAL_GPIO_Init+0x20a>
 800160e:	2307      	movs	r3, #7
 8001610:	e00e      	b.n	8001630 <HAL_GPIO_Init+0x228>
 8001612:	2308      	movs	r3, #8
 8001614:	e00c      	b.n	8001630 <HAL_GPIO_Init+0x228>
 8001616:	2306      	movs	r3, #6
 8001618:	e00a      	b.n	8001630 <HAL_GPIO_Init+0x228>
 800161a:	2305      	movs	r3, #5
 800161c:	e008      	b.n	8001630 <HAL_GPIO_Init+0x228>
 800161e:	2304      	movs	r3, #4
 8001620:	e006      	b.n	8001630 <HAL_GPIO_Init+0x228>
 8001622:	2303      	movs	r3, #3
 8001624:	e004      	b.n	8001630 <HAL_GPIO_Init+0x228>
 8001626:	2302      	movs	r3, #2
 8001628:	e002      	b.n	8001630 <HAL_GPIO_Init+0x228>
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <HAL_GPIO_Init+0x228>
 800162e:	2300      	movs	r3, #0
 8001630:	69fa      	ldr	r2, [r7, #28]
 8001632:	f002 0203 	and.w	r2, r2, #3
 8001636:	0092      	lsls	r2, r2, #2
 8001638:	4093      	lsls	r3, r2
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001640:	4935      	ldr	r1, [pc, #212]	; (8001718 <HAL_GPIO_Init+0x310>)
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	089b      	lsrs	r3, r3, #2
 8001646:	3302      	adds	r3, #2
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800164e:	4b3b      	ldr	r3, [pc, #236]	; (800173c <HAL_GPIO_Init+0x334>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001672:	4a32      	ldr	r2, [pc, #200]	; (800173c <HAL_GPIO_Init+0x334>)
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001678:	4b30      	ldr	r3, [pc, #192]	; (800173c <HAL_GPIO_Init+0x334>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800169c:	4a27      	ldr	r2, [pc, #156]	; (800173c <HAL_GPIO_Init+0x334>)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016a2:	4b26      	ldr	r3, [pc, #152]	; (800173c <HAL_GPIO_Init+0x334>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4013      	ands	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016c6:	4a1d      	ldr	r2, [pc, #116]	; (800173c <HAL_GPIO_Init+0x334>)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <HAL_GPIO_Init+0x334>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	43db      	mvns	r3, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4013      	ands	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016f0:	4a12      	ldr	r2, [pc, #72]	; (800173c <HAL_GPIO_Init+0x334>)
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3301      	adds	r3, #1
 80016fa:	61fb      	str	r3, [r7, #28]
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	2b0f      	cmp	r3, #15
 8001700:	f67f ae90 	bls.w	8001424 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	3724      	adds	r7, #36	; 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800
 8001718:	40013800 	.word	0x40013800
 800171c:	40020000 	.word	0x40020000
 8001720:	40020400 	.word	0x40020400
 8001724:	40020800 	.word	0x40020800
 8001728:	40020c00 	.word	0x40020c00
 800172c:	40021000 	.word	0x40021000
 8001730:	40021400 	.word	0x40021400
 8001734:	40021800 	.word	0x40021800
 8001738:	40021c00 	.word	0x40021c00
 800173c:	40013c00 	.word	0x40013c00

08001740 <memset>:
 8001740:	4402      	add	r2, r0
 8001742:	4603      	mov	r3, r0
 8001744:	4293      	cmp	r3, r2
 8001746:	d100      	bne.n	800174a <memset+0xa>
 8001748:	4770      	bx	lr
 800174a:	f803 1b01 	strb.w	r1, [r3], #1
 800174e:	e7f9      	b.n	8001744 <memset+0x4>

08001750 <__libc_init_array>:
 8001750:	b570      	push	{r4, r5, r6, lr}
 8001752:	4d0d      	ldr	r5, [pc, #52]	; (8001788 <__libc_init_array+0x38>)
 8001754:	4c0d      	ldr	r4, [pc, #52]	; (800178c <__libc_init_array+0x3c>)
 8001756:	1b64      	subs	r4, r4, r5
 8001758:	10a4      	asrs	r4, r4, #2
 800175a:	2600      	movs	r6, #0
 800175c:	42a6      	cmp	r6, r4
 800175e:	d109      	bne.n	8001774 <__libc_init_array+0x24>
 8001760:	4d0b      	ldr	r5, [pc, #44]	; (8001790 <__libc_init_array+0x40>)
 8001762:	4c0c      	ldr	r4, [pc, #48]	; (8001794 <__libc_init_array+0x44>)
 8001764:	f000 f818 	bl	8001798 <_init>
 8001768:	1b64      	subs	r4, r4, r5
 800176a:	10a4      	asrs	r4, r4, #2
 800176c:	2600      	movs	r6, #0
 800176e:	42a6      	cmp	r6, r4
 8001770:	d105      	bne.n	800177e <__libc_init_array+0x2e>
 8001772:	bd70      	pop	{r4, r5, r6, pc}
 8001774:	f855 3b04 	ldr.w	r3, [r5], #4
 8001778:	4798      	blx	r3
 800177a:	3601      	adds	r6, #1
 800177c:	e7ee      	b.n	800175c <__libc_init_array+0xc>
 800177e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001782:	4798      	blx	r3
 8001784:	3601      	adds	r6, #1
 8001786:	e7f2      	b.n	800176e <__libc_init_array+0x1e>
 8001788:	080017b0 	.word	0x080017b0
 800178c:	080017b0 	.word	0x080017b0
 8001790:	080017b0 	.word	0x080017b0
 8001794:	080017b4 	.word	0x080017b4

08001798 <_init>:
 8001798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800179a:	bf00      	nop
 800179c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800179e:	bc08      	pop	{r3}
 80017a0:	469e      	mov	lr, r3
 80017a2:	4770      	bx	lr

080017a4 <_fini>:
 80017a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017a6:	bf00      	nop
 80017a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017aa:	bc08      	pop	{r3}
 80017ac:	469e      	mov	lr, r3
 80017ae:	4770      	bx	lr
